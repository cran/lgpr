// Generated by rstantools.  Do not edit by hand.

// [[Rcpp::depends(StanHeaders)]]
// [[Rcpp::depends(rstan)]]
// [[Rcpp::plugins(rstan)]]
// [[Rcpp::depends(RcppEigen)]]
// [[Rcpp::depends(BH)]]
#include <stan/math/prim/fun/Eigen.hpp>
#include <stan/math/prim/meta.hpp>
#include <boost/integer/integer_log2.hpp>
#include <RcppEigen.h>
#ifndef USE_STANC3
#define USE_STANC3
#endif
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model58cd35ad97db_User_defined_functions_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'User-defined functions', line 4, column 4 to column 31)",
                                                      " (in 'User-defined functions', line 3, column 40 to line 5, column 3)",
                                                      " (in 'User-defined functions', line 8, column 4 to column 28)",
                                                      " (in 'User-defined functions', line 9, column 11 to column 14)",
                                                      " (in 'User-defined functions', line 9, column 4 to column 46)",
                                                      " (in 'User-defined functions', line 10, column 4 to column 24)",
                                                      " (in 'User-defined functions', line 11, column 4 to column 31)",
                                                      " (in 'User-defined functions', line 7, column 59 to line 12, column 3)",
                                                      " (in 'User-defined functions', line 15, column 4 to column 38)",
                                                      " (in 'User-defined functions', line 14, column 42 to line 16, column 3)",
                                                      " (in 'User-defined functions', line 24, column 4 to column 33)",
                                                      " (in 'User-defined functions', line 25, column 11 to column 12)",
                                                      " (in 'User-defined functions', line 25, column 4 to column 61)",
                                                      " (in 'User-defined functions', line 26, column 11 to column 12)",
                                                      " (in 'User-defined functions', line 26, column 4 to column 53)",
                                                      " (in 'User-defined functions', line 27, column 4 to column 41)",
                                                      " (in 'User-defined functions', line 23, column 2 to line 28, column 3)",
                                                      " (in 'User-defined functions', line 32, column 4 to column 28)",
                                                      " (in 'User-defined functions', line 33, column 11 to column 12)",
                                                      " (in 'User-defined functions', line 33, column 4 to column 42)",
                                                      " (in 'User-defined functions', line 35, column 13 to column 14)",
                                                      " (in 'User-defined functions', line 35, column 6 to column 24)",
                                                      " (in 'User-defined functions', line 37, column 8 to column 31)",
                                                      " (in 'User-defined functions', line 36, column 20 to line 38, column 7)",
                                                      " (in 'User-defined functions', line 36, column 6 to line 38, column 7)",
                                                      " (in 'User-defined functions', line 39, column 6 to column 23)",
                                                      " (in 'User-defined functions', line 34, column 26 to line 40, column 5)",
                                                      " (in 'User-defined functions', line 34, column 4 to line 40, column 5)",
                                                      " (in 'User-defined functions', line 41, column 4 to column 19)",
                                                      " (in 'User-defined functions', line 31, column 2 to line 42, column 3)",
                                                      " (in 'User-defined functions', line 50, column 4 to column 37)",
                                                      " (in 'User-defined functions', line 51, column 10 to column 19)",
                                                      " (in 'User-defined functions', line 51, column 28 to column 29)",
                                                      " (in 'User-defined functions', line 51, column 4 to column 44)",
                                                      " (in 'User-defined functions', line 53, column 13 to column 14)",
                                                      " (in 'User-defined functions', line 53, column 6 to column 23)",
                                                      " (in 'User-defined functions', line 54, column 6 to column 40)",
                                                      " (in 'User-defined functions', line 55, column 6 to column 26)",
                                                      " (in 'User-defined functions', line 56, column 6 to column 26)",
                                                      " (in 'User-defined functions', line 57, column 6 to column 28)",
                                                      " (in 'User-defined functions', line 58, column 6 to column 29)",
                                                      " (in 'User-defined functions', line 63, column 8 to column 36)",
                                                      " (in 'User-defined functions', line 62, column 13 to line 64, column 7)",
                                                      " (in 'User-defined functions', line 61, column 8 to column 61)",
                                                      " (in 'User-defined functions', line 60, column 25 to line 62, column 7)",
                                                      " (in 'User-defined functions', line 60, column 6 to line 64, column 7)",
                                                      " (in 'User-defined functions', line 67, column 8 to column 69)",
                                                      " (in 'User-defined functions', line 66, column 36 to line 68, column 7)",
                                                      " (in 'User-defined functions', line 66, column 6 to line 68, column 7)",
                                                      " (in 'User-defined functions', line 69, column 6 to column 31)",
                                                      " (in 'User-defined functions', line 52, column 27 to line 70, column 5)",
                                                      " (in 'User-defined functions', line 52, column 4 to line 70, column 5)",
                                                      " (in 'User-defined functions', line 71, column 4 to column 25)",
                                                      " (in 'User-defined functions', line 49, column 2 to line 72, column 3)",
                                                      " (in 'User-defined functions', line 75, column 4 to column 41)",
                                                      " (in 'User-defined functions', line 74, column 48 to line 76, column 3)",
                                                      " (in 'User-defined functions', line 81, column 4 to column 38)",
                                                      " (in 'User-defined functions', line 82, column 4 to column 40)",
                                                      " (in 'User-defined functions', line 83, column 4 to column 28)",
                                                      " (in 'User-defined functions', line 84, column 11 to column 12)",
                                                      " (in 'User-defined functions', line 84, column 4 to column 45)",
                                                      " (in 'User-defined functions', line 85, column 4 to column 25)",
                                                      " (in 'User-defined functions', line 80, column 2 to line 86, column 3)",
                                                      " (in 'User-defined functions', line 89, column 4 to column 42)",
                                                      " (in 'User-defined functions', line 88, column 68 to line 90, column 3)",
                                                      " (in 'User-defined functions', line 108, column 4 to column 20)",
                                                      " (in 'User-defined functions', line 109, column 4 to column 22)",
                                                      " (in 'User-defined functions', line 110, column 4 to column 37)",
                                                      " (in 'User-defined functions', line 111, column 10 to column 19)",
                                                      " (in 'User-defined functions', line 111, column 28 to column 29)",
                                                      " (in 'User-defined functions', line 111, column 4 to column 39)",
                                                      " (in 'User-defined functions', line 115, column 13 to column 14)",
                                                      " (in 'User-defined functions', line 115, column 6 to column 41)",
                                                      " (in 'User-defined functions', line 116, column 13 to column 14)",
                                                      " (in 'User-defined functions', line 116, column 6 to column 18)",
                                                      " (in 'User-defined functions', line 118, column 6 to column 40)",
                                                      " (in 'User-defined functions', line 119, column 6 to column 26)",
                                                      " (in 'User-defined functions', line 120, column 6 to column 29)",
                                                      " (in 'User-defined functions', line 121, column 6 to column 29)",
                                                      " (in 'User-defined functions', line 122, column 6 to column 30)",
                                                      " (in 'User-defined functions', line 123, column 6 to column 34)",
                                                      " (in 'User-defined functions', line 124, column 6 to column 29)",
                                                      " (in 'User-defined functions', line 130, column 10 to column 26)",
                                                      " (in 'User-defined functions', line 129, column 13 to line 131, column 9)",
                                                      " (in 'User-defined functions', line 128, column 10 to column 33)",
                                                      " (in 'User-defined functions', line 127, column 21 to line 129, column 9)",
                                                      " (in 'User-defined functions', line 127, column 8 to line 131, column 9)",
                                                      " (in 'User-defined functions', line 126, column 20 to line 132, column 7)",
                                                      " (in 'User-defined functions', line 126, column 6 to line 132, column 7)",
                                                      " (in 'User-defined functions', line 135, column 8 to column 15)",
                                                      " (in 'User-defined functions', line 136, column 8 to column 21)",
                                                      " (in 'User-defined functions', line 139, column 10 to column 69)",
                                                      " (in 'User-defined functions', line 138, column 20 to line 140, column 9)",
                                                      " (in 'User-defined functions', line 138, column 8 to line 140, column 9)",
                                                      " (in 'User-defined functions', line 142, column 8 to column 25)",
                                                      " (in 'User-defined functions', line 144, column 10 to column 71)",
                                                      " (in 'User-defined functions', line 143, column 25 to line 145, column 9)",
                                                      " (in 'User-defined functions', line 143, column 8 to line 145, column 9)",
                                                      " (in 'User-defined functions', line 147, column 8 to column 34)",
                                                      " (in 'User-defined functions', line 134, column 19 to line 148, column 7)",
                                                      " (in 'User-defined functions', line 134, column 6 to line 148, column 7)",
                                                      " (in 'User-defined functions', line 150, column 6 to column 21)",
                                                      " (in 'User-defined functions', line 154, column 8 to column 51)",
                                                      " (in 'User-defined functions', line 153, column 13 to line 155, column 7)",
                                                      " (in 'User-defined functions', line 152, column 8 to column 68)",
                                                      " (in 'User-defined functions', line 151, column 20 to line 153, column 7)",
                                                      " (in 'User-defined functions', line 151, column 6 to line 155, column 7)",
                                                      " (in 'User-defined functions', line 158, column 8 to column 70)",
                                                      " (in 'User-defined functions', line 157, column 18 to line 159, column 7)",
                                                      " (in 'User-defined functions', line 157, column 6 to line 159, column 7)",
                                                      " (in 'User-defined functions', line 160, column 6 to column 26)",
                                                      " (in 'User-defined functions', line 113, column 25 to line 161, column 5)",
                                                      " (in 'User-defined functions', line 113, column 4 to line 161, column 5)",
                                                      " (in 'User-defined functions', line 162, column 4 to column 20)",
                                                      " (in 'User-defined functions', line 107, column 2 to line 163, column 3)",
                                                      " (in 'User-defined functions', line 166, column 4 to column 22)",
                                                      " (in 'User-defined functions', line 167, column 4 to column 22)",
                                                      " (in 'User-defined functions', line 168, column 11 to column 13)",
                                                      " (in 'User-defined functions', line 168, column 15 to column 17)",
                                                      " (in 'User-defined functions', line 168, column 4 to column 21)",
                                                      " (in 'User-defined functions', line 174, column 10 to column 38)",
                                                      " (in 'User-defined functions', line 173, column 15 to line 175, column 9)",
                                                      " (in 'User-defined functions', line 172, column 10 to column 21)",
                                                      " (in 'User-defined functions', line 171, column 28 to line 173, column 9)",
                                                      " (in 'User-defined functions', line 171, column 8 to line 175, column 9)",
                                                      " (in 'User-defined functions', line 170, column 22 to line 176, column 7)",
                                                      " (in 'User-defined functions', line 170, column 6 to line 176, column 7)",
                                                      " (in 'User-defined functions', line 169, column 20 to line 177, column 5)",
                                                      " (in 'User-defined functions', line 169, column 4 to line 177, column 5)",
                                                      " (in 'User-defined functions', line 178, column 4 to column 14)",
                                                      " (in 'User-defined functions', line 165, column 89 to line 179, column 3)",
                                                      " (in 'User-defined functions', line 182, column 4 to column 22)",
                                                      " (in 'User-defined functions', line 183, column 4 to column 22)",
                                                      " (in 'User-defined functions', line 184, column 11 to column 13)",
                                                      " (in 'User-defined functions', line 184, column 14 to column 16)",
                                                      " (in 'User-defined functions', line 184, column 4 to column 20)",
                                                      " (in 'User-defined functions', line 187, column 8 to column 34)",
                                                      " (in 'User-defined functions', line 186, column 22 to line 188, column 7)",
                                                      " (in 'User-defined functions', line 186, column 6 to line 188, column 7)",
                                                      " (in 'User-defined functions', line 185, column 20 to line 189, column 5)",
                                                      " (in 'User-defined functions', line 185, column 4 to line 189, column 5)",
                                                      " (in 'User-defined functions', line 190, column 4 to column 14)",
                                                      " (in 'User-defined functions', line 181, column 67 to line 191, column 3)",
                                                      " (in 'User-defined functions', line 194, column 4 to column 22)",
                                                      " (in 'User-defined functions', line 195, column 4 to column 22)",
                                                      " (in 'User-defined functions', line 196, column 11 to column 13)",
                                                      " (in 'User-defined functions', line 196, column 14 to column 16)",
                                                      " (in 'User-defined functions', line 196, column 4 to column 20)",
                                                      " (in 'User-defined functions', line 199, column 8 to column 45)",
                                                      " (in 'User-defined functions', line 198, column 22 to line 200, column 7)",
                                                      " (in 'User-defined functions', line 198, column 6 to line 200, column 7)",
                                                      " (in 'User-defined functions', line 197, column 20 to line 201, column 5)",
                                                      " (in 'User-defined functions', line 197, column 4 to line 201, column 5)",
                                                      " (in 'User-defined functions', line 202, column 4 to column 14)",
                                                      " (in 'User-defined functions', line 193, column 67 to line 203, column 3)",
                                                      " (in 'User-defined functions', line 209, column 4 to column 30)",
                                                      " (in 'User-defined functions', line 210, column 4 to column 30)",
                                                      " (in 'User-defined functions', line 211, column 11 to column 13)",
                                                      " (in 'User-defined functions', line 211, column 15 to column 17)",
                                                      " (in 'User-defined functions', line 211, column 4 to column 21)",
                                                      " (in 'User-defined functions', line 218, column 6 to column 44)",
                                                      " (in 'User-defined functions', line 216, column 11 to line 219, column 5)",
                                                      " (in 'User-defined functions', line 215, column 6 to column 34)",
                                                      " (in 'User-defined functions', line 214, column 33 to line 216, column 5)",
                                                      " (in 'User-defined functions', line 214, column 11 to line 219, column 5)",
                                                      " (in 'User-defined functions', line 213, column 6 to column 34)",
                                                      " (in 'User-defined functions', line 212, column 26 to line 214, column 5)",
                                                      " (in 'User-defined functions', line 212, column 4 to line 219, column 5)",
                                                      " (in 'User-defined functions', line 220, column 4 to column 14)",
                                                      " (in 'User-defined functions', line 208, column 2 to line 221, column 3)",
                                                      " (in 'User-defined functions', line 230, column 4 to column 37)",
                                                      " (in 'User-defined functions', line 231, column 10 to column 19)",
                                                      " (in 'User-defined functions', line 231, column 28 to column 30)",
                                                      " (in 'User-defined functions', line 231, column 32 to column 34)",
                                                      " (in 'User-defined functions', line 231, column 4 to column 44)",
                                                      " (in 'User-defined functions', line 233, column 13 to column 15)",
                                                      " (in 'User-defined functions', line 233, column 17 to column 19)",
                                                      " (in 'User-defined functions', line 233, column 6 to column 23)",
                                                      " (in 'User-defined functions', line 234, column 6 to column 40)",
                                                      " (in 'User-defined functions', line 235, column 6 to column 26)",
                                                      " (in 'User-defined functions', line 236, column 6 to column 26)",
                                                      " (in 'User-defined functions', line 237, column 6 to column 28)",
                                                      " (in 'User-defined functions', line 238, column 6 to column 29)",
                                                      " (in 'User-defined functions', line 243, column 8 to column 34)",
                                                      " (in 'User-defined functions', line 242, column 13 to line 244, column 7)",
                                                      " (in 'User-defined functions', line 241, column 8 to column 74)",
                                                      " (in 'User-defined functions', line 240, column 25 to line 242, column 7)",
                                                      " (in 'User-defined functions', line 240, column 6 to line 244, column 7)",
                                                      " (in 'User-defined functions', line 247, column 8 to column 36)",
                                                      " (in 'User-defined functions', line 248, column 8 to column 71)",
                                                      " (in 'User-defined functions', line 246, column 36 to line 249, column 7)",
                                                      " (in 'User-defined functions', line 246, column 6 to line 249, column 7)",
                                                      " (in 'User-defined functions', line 250, column 6 to column 21)",
                                                      " (in 'User-defined functions', line 232, column 27 to line 251, column 5)",
                                                      " (in 'User-defined functions', line 232, column 4 to line 251, column 5)",
                                                      " (in 'User-defined functions', line 252, column 4 to column 20)",
                                                      " (in 'User-defined functions', line 229, column 2 to line 253, column 3)",
                                                      " (in 'User-defined functions', line 256, column 4 to column 74)",
                                                      " (in 'User-defined functions', line 255, column 68 to line 257, column 3)",
                                                      " (in 'User-defined functions', line 262, column 4 to column 38)",
                                                      " (in 'User-defined functions', line 263, column 4 to column 40)",
                                                      " (in 'User-defined functions', line 264, column 4 to line 267, column 6)",
                                                      " (in 'User-defined functions', line 261, column 2 to line 268, column 3)",
                                                      " (in 'User-defined functions', line 271, column 4 to line 274, column 6)",
                                                      " (in 'User-defined functions', line 270, column 89 to line 275, column 3)",
                                                      " (in 'User-defined functions', line 299, column 4 to column 20)",
                                                      " (in 'User-defined functions', line 300, column 4 to column 20)",
                                                      " (in 'User-defined functions', line 301, column 4 to column 22)",
                                                      " (in 'User-defined functions', line 302, column 4 to column 37)",
                                                      " (in 'User-defined functions', line 303, column 10 to column 19)",
                                                      " (in 'User-defined functions', line 303, column 28 to column 30)",
                                                      " (in 'User-defined functions', line 303, column 32 to column 34)",
                                                      " (in 'User-defined functions', line 303, column 4 to column 39)",
                                                      " (in 'User-defined functions', line 307, column 13 to column 15)",
                                                      " (in 'User-defined functions', line 307, column 17 to column 19)",
                                                      " (in 'User-defined functions', line 307, column 6 to column 36)",
                                                      " (in 'User-defined functions', line 308, column 13 to column 15)",
                                                      " (in 'User-defined functions', line 308, column 6 to column 20)",
                                                      " (in 'User-defined functions', line 309, column 13 to column 15)",
                                                      " (in 'User-defined functions', line 309, column 6 to column 20)",
                                                      " (in 'User-defined functions', line 311, column 6 to column 40)",
                                                      " (in 'User-defined functions', line 312, column 6 to column 26)",
                                                      " (in 'User-defined functions', line 313, column 6 to column 29)",
                                                      " (in 'User-defined functions', line 314, column 6 to column 29)",
                                                      " (in 'User-defined functions', line 315, column 6 to column 30)",
                                                      " (in 'User-defined functions', line 316, column 6 to column 34)",
                                                      " (in 'User-defined functions', line 317, column 6 to column 29)",
                                                      " (in 'User-defined functions', line 324, column 10 to column 28)",
                                                      " (in 'User-defined functions', line 325, column 10 to column 28)",
                                                      " (in 'User-defined functions', line 323, column 13 to line 326, column 9)",
                                                      " (in 'User-defined functions', line 321, column 10 to column 35)",
                                                      " (in 'User-defined functions', line 322, column 10 to column 35)",
                                                      " (in 'User-defined functions', line 320, column 21 to line 323, column 9)",
                                                      " (in 'User-defined functions', line 320, column 8 to line 326, column 9)",
                                                      " (in 'User-defined functions', line 319, column 20 to line 327, column 7)",
                                                      " (in 'User-defined functions', line 319, column 6 to line 327, column 7)",
                                                      " (in 'User-defined functions', line 330, column 8 to column 15)",
                                                      " (in 'User-defined functions', line 331, column 8 to column 21)",
                                                      " (in 'User-defined functions', line 334, column 10 to column 72)",
                                                      " (in 'User-defined functions', line 335, column 10 to column 72)",
                                                      " (in 'User-defined functions', line 333, column 20 to line 336, column 9)",
                                                      " (in 'User-defined functions', line 333, column 8 to line 336, column 9)",
                                                      " (in 'User-defined functions', line 338, column 8 to column 25)",
                                                      " (in 'User-defined functions', line 340, column 10 to column 61)",
                                                      " (in 'User-defined functions', line 339, column 25 to line 341, column 9)",
                                                      " (in 'User-defined functions', line 339, column 8 to line 341, column 9)",
                                                      " (in 'User-defined functions', line 343, column 8 to column 36)",
                                                      " (in 'User-defined functions', line 344, column 8 to column 36)",
                                                      " (in 'User-defined functions', line 329, column 19 to line 345, column 7)",
                                                      " (in 'User-defined functions', line 329, column 6 to line 345, column 7)",
                                                      " (in 'User-defined functions', line 347, column 6 to column 21)",
                                                      " (in 'User-defined functions', line 352, column 8 to column 41)",
                                                      " (in 'User-defined functions', line 351, column 13 to line 353, column 7)",
                                                      " (in 'User-defined functions', line 349, column 8 to column 21)",
                                                      " (in 'User-defined functions', line 350, column 8 to column 72)",
                                                      " (in 'User-defined functions', line 348, column 20 to line 351, column 7)",
                                                      " (in 'User-defined functions', line 348, column 6 to line 353, column 7)",
                                                      " (in 'User-defined functions', line 356, column 8 to column 69)",
                                                      " (in 'User-defined functions', line 355, column 18 to line 357, column 7)",
                                                      " (in 'User-defined functions', line 355, column 6 to line 357, column 7)",
                                                      " (in 'User-defined functions', line 358, column 6 to column 16)",
                                                      " (in 'User-defined functions', line 305, column 25 to line 359, column 5)",
                                                      " (in 'User-defined functions', line 305, column 4 to line 359, column 5)",
                                                      " (in 'User-defined functions', line 360, column 4 to column 15)",
                                                      " (in 'User-defined functions', line 298, column 2 to line 361, column 3)",
                                                      " (in 'User-defined functions', line 364, column 4 to column 23)",
                                                      " (in 'User-defined functions', line 365, column 4 to column 15)",
                                                      " (in 'User-defined functions', line 368, column 6 to column 33)",
                                                      " (in 'User-defined functions', line 369, column 6 to column 20)",
                                                      " (in 'User-defined functions', line 367, column 20 to line 370, column 5)",
                                                      " (in 'User-defined functions', line 367, column 4 to line 370, column 5)",
                                                      " (in 'User-defined functions', line 381, column 6 to column 50)",
                                                      " (in 'User-defined functions', line 380, column 26 to line 382, column 5)",
                                                      " (in 'User-defined functions', line 380, column 10 to line 382, column 5)",
                                                      " (in 'User-defined functions', line 379, column 6 to column 50)",
                                                      " (in 'User-defined functions', line 378, column 26 to line 380, column 5)",
                                                      " (in 'User-defined functions', line 378, column 10 to line 382, column 5)",
                                                      " (in 'User-defined functions', line 377, column 6 to column 46)",
                                                      " (in 'User-defined functions', line 376, column 26 to line 378, column 5)",
                                                      " (in 'User-defined functions', line 376, column 10 to line 382, column 5)",
                                                      " (in 'User-defined functions', line 375, column 6 to column 54)",
                                                      " (in 'User-defined functions', line 374, column 26 to line 376, column 5)",
                                                      " (in 'User-defined functions', line 374, column 10 to line 382, column 5)",
                                                      " (in 'User-defined functions', line 373, column 6 to column 47)",
                                                      " (in 'User-defined functions', line 372, column 20 to line 374, column 5)",
                                                      " (in 'User-defined functions', line 372, column 4 to line 382, column 5)",
                                                      " (in 'User-defined functions', line 383, column 4 to column 22)",
                                                      " (in 'User-defined functions', line 363, column 75 to line 384, column 3)",
                                                      " (in 'User-defined functions', line 387, column 4 to column 30)",
                                                      " (in 'User-defined functions', line 388, column 11 to column 12)",
                                                      " (in 'User-defined functions', line 388, column 4 to column 35)",
                                                      " (in 'User-defined functions', line 390, column 6 to column 19)",
                                                      " (in 'User-defined functions', line 389, column 25 to line 391, column 5)",
                                                      " (in 'User-defined functions', line 389, column 4 to line 391, column 5)",
                                                      " (in 'User-defined functions', line 392, column 4 to column 14)",
                                                      " (in 'User-defined functions', line 386, column 56 to line 393, column 3)",
                                                      " (in 'User-defined functions', line 396, column 4 to column 24)",
                                                      " (in 'User-defined functions', line 397, column 4 to column 24)",
                                                      " (in 'User-defined functions', line 398, column 11 to column 13)",
                                                      " (in 'User-defined functions', line 398, column 15 to column 17)",
                                                      " (in 'User-defined functions', line 398, column 4 to column 32)",
                                                      " (in 'User-defined functions', line 400, column 6 to column 20)",
                                                      " (in 'User-defined functions', line 399, column 23 to line 401, column 5)",
                                                      " (in 'User-defined functions', line 399, column 4 to line 401, column 5)",
                                                      " (in 'User-defined functions', line 402, column 4 to column 18)",
                                                      " (in 'User-defined functions', line 395, column 48 to line 403, column 3)"};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
STAN_var_mask(const T0__& x_arg__, const T1__& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 1;
    return inv(add(1, stan::math::exp(multiply(-a, x))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_var_mask_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
operator()(const T0__& x, const T1__& a, std::ostream* pstream__)  const 
{
return STAN_var_mask(x, a, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
STAN_expand(const T0__& v_arg__, const std::vector<int>& idx_expand,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& v = to_ref(v_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int L;
    L = std::numeric_limits<int>::min();
    
    current_statement__ = 3;
    L = num_elements(v);
    current_statement__ = 4;
    validate_non_negative_index("v_add0", "L + 1", (L + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> v_add0;
    v_add0 = Eigen::Matrix<local_scalar_t__, -1, 1>((L + 1));
    stan::math::fill(v_add0, DUMMY_VAR__);
    
    current_statement__ = 5;
    assign(v_add0, nil_index_list(), rep_vector(0.0, (L + 1)),
      "assigning variable v_add0");
    current_statement__ = 6;
    assign(v_add0, cons_list(index_min_max(2, (L + 1)), nil_index_list()), v,
      "assigning variable v_add0");
    current_statement__ = 7;
    return rvalue(v_add0,
             cons_list(index_multi(idx_expand), nil_index_list()), "v_add0");
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_expand_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& v, const std::vector<int>& idx_expand,
           std::ostream* pstream__)  const 
{
return STAN_expand(v, idx_expand, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
STAN_warp_input(const T0__& x_arg__, const T1__& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 9;
    return add(-1,
             multiply(2, inv(add(1, stan::math::exp(multiply(-a, x))))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_warp_input_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
operator()(const T0__& x, const T1__& a, std::ostream* pstream__)  const 
{
return STAN_warp_input(x, a, pstream__);
}
};
template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
STAN_edit_x_cont(const T0__& x_cont_arg__,
                 const std::vector<int>& idx_expand,
                 const T2__& teff_obs_arg__, const T3__& teff_arg__,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& x_cont = to_ref(x_cont_arg__);
  const auto& teff_obs = to_ref(teff_obs_arg__);
  const auto& teff = to_ref(teff_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 11;
    n = num_elements(x_cont);
    current_statement__ = 12;
    validate_non_negative_index("x_teff_obs", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> x_teff_obs;
    x_teff_obs = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(x_teff_obs, DUMMY_VAR__);
    
    current_statement__ = 13;
    assign(x_teff_obs, nil_index_list(),
      STAN_expand(teff_obs, idx_expand, pstream__),
      "assigning variable x_teff_obs");
    current_statement__ = 14;
    validate_non_negative_index("x_teff", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> x_teff;
    x_teff = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(x_teff, DUMMY_VAR__);
    
    current_statement__ = 15;
    assign(x_teff, nil_index_list(),
      STAN_expand(teff, idx_expand, pstream__), "assigning variable x_teff");
    current_statement__ = 16;
    return subtract(add(x_cont, x_teff_obs), x_teff);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_edit_x_cont_functor__ {
template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
operator()(const T0__& x_cont, const std::vector<int>& idx_expand,
           const T2__& teff_obs, const T3__& teff, std::ostream* pstream__)  const 
{
return STAN_edit_x_cont(x_cont, idx_expand, teff_obs, teff, pstream__);
}
};
Eigen::Matrix<double, -1, 1>
STAN_kernel_const_diag(const std::vector<int>& x, const int& kernel_type,
                       std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 18;
    n = num_elements(x);
    current_statement__ = 19;
    validate_non_negative_index("K_diag", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> K_diag;
    K_diag = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(K_diag, DUMMY_VAR__);
    
    current_statement__ = 20;
    assign(K_diag, nil_index_list(), rep_vector(1.0, n),
      "assigning variable K_diag");
    current_statement__ = 28;
    if (logical_eq(kernel_type, 2)) {
      current_statement__ = 21;
      validate_non_negative_index("is_zero", "n", n);
      Eigen::Matrix<local_scalar_t__, -1, 1> is_zero;
      is_zero = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(is_zero, DUMMY_VAR__);
      
      current_statement__ = 25;
      for (int j = 1; j <= n; ++j) {
        current_statement__ = 23;
        assign(is_zero, cons_list(index_uni(j), nil_index_list()),
          logical_eq(x[(j - 1)], 0), "assigning variable is_zero");}
      current_statement__ = 26;
      assign(K_diag, nil_index_list(), is_zero, "assigning variable K_diag");
    } 
    current_statement__ = 29;
    return K_diag;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_const_diag_functor__ {
Eigen::Matrix<double, -1, 1>
operator()(const std::vector<int>& x, const int& kernel_type,
           std::ostream* pstream__)  const 
{
return STAN_kernel_const_diag(x, kernel_type, pstream__);
}
};
std::vector<Eigen::Matrix<double, -1, 1>>
STAN_kernel_const_all_diag(const int& n,
                           const std::vector<std::vector<int>>& x,
                           const std::vector<std::vector<int>>& x_mask,
                           const std::vector<std::vector<int>>& components,
                           std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int num_comps;
    num_comps = std::numeric_limits<int>::min();
    
    current_statement__ = 31;
    num_comps = stan::math::size(components);
    current_statement__ = 32;
    validate_non_negative_index("K_const_diag", "num_comps", num_comps);
    current_statement__ = 33;
    validate_non_negative_index("K_const_diag", "n", n);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> K_const_diag;
    K_const_diag = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_comps, Eigen::Matrix<local_scalar_t__, -1, 1>(n));
    stan::math::fill(K_const_diag, DUMMY_VAR__);
    
    current_statement__ = 52;
    for (int j = 1; j <= num_comps; ++j) {
      current_statement__ = 35;
      validate_non_negative_index("K_diag", "n", n);
      Eigen::Matrix<local_scalar_t__, -1, 1> K_diag;
      K_diag = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(K_diag, DUMMY_VAR__);
      
      std::vector<int> opts;
      opts = std::vector<int>(9, std::numeric_limits<int>::min());
      
      current_statement__ = 37;
      assign(opts, nil_index_list(), components[(j - 1)],
        "assigning variable opts");
      int ctype;
      ctype = std::numeric_limits<int>::min();
      
      current_statement__ = 38;
      ctype = opts[(1 - 1)];
      int ktype;
      ktype = std::numeric_limits<int>::min();
      
      current_statement__ = 39;
      ktype = opts[(2 - 1)];
      int idx_cat;
      idx_cat = std::numeric_limits<int>::min();
      
      current_statement__ = 40;
      idx_cat = opts[(8 - 1)];
      int idx_cont;
      idx_cont = std::numeric_limits<int>::min();
      
      current_statement__ = 41;
      idx_cont = opts[(9 - 1)];
      current_statement__ = 46;
      if (logical_neq(idx_cont, 0)) {
        current_statement__ = 44;
        assign(K_diag, nil_index_list(),
          STAN_kernel_const_diag(x_mask[(idx_cont - 1)], 2, pstream__),
          "assigning variable K_diag");
      } else {
        current_statement__ = 42;
        assign(K_diag, nil_index_list(), rep_vector(1.0, n),
          "assigning variable K_diag");
      }
      current_statement__ = 49;
      if ((primitive_value(logical_eq(ctype, 0)) || primitive_value(
          logical_eq(ctype, 2)))) {
        current_statement__ = 47;
        assign(K_diag, nil_index_list(),
          elt_multiply(stan::model::deep_copy(K_diag),
            STAN_kernel_const_diag(x[(idx_cat - 1)], ktype, pstream__)),
          "assigning variable K_diag");
      } 
      current_statement__ = 50;
      assign(K_const_diag, cons_list(index_uni(j), nil_index_list()), K_diag,
        "assigning variable K_const_diag");}
    current_statement__ = 53;
    return K_const_diag;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_const_all_diag_functor__ {
std::vector<Eigen::Matrix<double, -1, 1>>
operator()(const int& n, const std::vector<std::vector<int>>& x,
           const std::vector<std::vector<int>>& x_mask,
           const std::vector<std::vector<int>>& components,
           std::ostream* pstream__)  const 
{
return STAN_kernel_const_all_diag(n, x, x_mask, components, pstream__);
}
};
template <typename T1__>
Eigen::Matrix<stan::promote_args_t<T1__>, -1, 1>
STAN_kernel_eq_diag(const int& n, const T1__& alpha, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 55;
    return rep_vector(square(alpha), n);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_eq_diag_functor__ {
template <typename T1__>
Eigen::Matrix<stan::promote_args_t<T1__>, -1, 1>
operator()(const int& n, const T1__& alpha, std::ostream* pstream__)  const 
{
return STAN_kernel_eq_diag(n, alpha, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
STAN_kernel_varmask_diag(const T0__& x_arg__, const T1__& steepness,
                         const std::vector<double>& vm_params,
                         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 57;
    a = (steepness * vm_params[(2 - 1)]);
    local_scalar_t__ r;
    r = DUMMY_VAR__;
    
    current_statement__ = 58;
    r = (inv(a) * logit(vm_params[(1 - 1)]));
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 59;
    n = num_elements(x);
    current_statement__ = 60;
    validate_non_negative_index("f_vm", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> f_vm;
    f_vm = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(f_vm, DUMMY_VAR__);
    
    current_statement__ = 61;
    assign(f_vm, nil_index_list(),
      STAN_var_mask(subtract(x, r), a, pstream__), "assigning variable f_vm");
    current_statement__ = 62;
    return elt_multiply(f_vm, f_vm);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_varmask_diag_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
operator()(const T0__& x, const T1__& steepness,
           const std::vector<double>& vm_params, std::ostream* pstream__)  const 
{
return STAN_kernel_varmask_diag(x, steepness, vm_params, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
STAN_kernel_beta_diag(const T0__& beta_arg__,
                      const std::vector<int>& idx_expand,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& beta = to_ref(beta_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 64;
    return STAN_expand(beta, idx_expand, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_beta_diag_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& beta, const std::vector<int>& idx_expand,
           std::ostream* pstream__)  const 
{
return STAN_kernel_beta_diag(beta, idx_expand, pstream__);
}
};
template <typename T5__, typename T6__, typename T7__, typename T8__>
std::vector<Eigen::Matrix<stan::promote_args_t<T5__, T6__, T7__,
T8__>, -1, 1>>
STAN_kernel_all_diag(const int& n,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& K_const_diag,
                     const std::vector<std::vector<int>>& components,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& x,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& x_unnorm,
                     const std::vector<T5__>& alpha,
                     const std::vector<T6__>& wrp,
                     const std::vector<Eigen::Matrix<T7__, -1, 1>>& beta,
                     const std::vector<Eigen::Matrix<T8__, -1, 1>>& teff,
                     const std::vector<double>& vm_params,
                     const std::vector<int>& idx_expand,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& teff_zero,
                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T5__, T6__, T7__, T8__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int idx_wrp;
    idx_wrp = std::numeric_limits<int>::min();
    
    current_statement__ = 66;
    idx_wrp = 0;
    int idx_alpha;
    idx_alpha = std::numeric_limits<int>::min();
    
    current_statement__ = 67;
    idx_alpha = 0;
    int num_comps;
    num_comps = std::numeric_limits<int>::min();
    
    current_statement__ = 68;
    num_comps = stan::math::size(components);
    current_statement__ = 69;
    validate_non_negative_index("KX_diag", "num_comps", num_comps);
    current_statement__ = 70;
    validate_non_negative_index("KX_diag", "n", n);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> KX_diag;
    KX_diag = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_comps, Eigen::Matrix<local_scalar_t__, -1, 1>(n));
    stan::math::fill(KX_diag, DUMMY_VAR__);
    
    current_statement__ = 113;
    for (int j = 1; j <= num_comps; ++j) {
      current_statement__ = 72;
      validate_non_negative_index("K_diag", "n", n);
      Eigen::Matrix<local_scalar_t__, -1, 1> K_diag;
      K_diag = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(K_diag, DUMMY_VAR__);
      
      current_statement__ = 73;
      assign(K_diag, nil_index_list(), K_const_diag[(j - 1)],
        "assigning variable K_diag");
      current_statement__ = 74;
      validate_non_negative_index("X", "n", n);
      Eigen::Matrix<local_scalar_t__, -1, 1> X;
      X = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(X, DUMMY_VAR__);
      
      std::vector<int> opts;
      opts = std::vector<int>(9, std::numeric_limits<int>::min());
      
      current_statement__ = 76;
      assign(opts, nil_index_list(), components[(j - 1)],
        "assigning variable opts");
      int ctype;
      ctype = std::numeric_limits<int>::min();
      
      current_statement__ = 77;
      ctype = opts[(1 - 1)];
      int idx_cont;
      idx_cont = std::numeric_limits<int>::min();
      
      current_statement__ = 78;
      idx_cont = opts[(9 - 1)];
      int is_heter;
      is_heter = std::numeric_limits<int>::min();
      
      current_statement__ = 79;
      is_heter = opts[(4 - 1)];
      int is_warped;
      is_warped = std::numeric_limits<int>::min();
      
      current_statement__ = 80;
      is_warped = opts[(5 - 1)];
      int is_var_masked;
      is_var_masked = std::numeric_limits<int>::min();
      
      current_statement__ = 81;
      is_var_masked = opts[(6 - 1)];
      int is_uncrt;
      is_uncrt = std::numeric_limits<int>::min();
      
      current_statement__ = 82;
      is_uncrt = opts[(7 - 1)];
      current_statement__ = 89;
      if (logical_neq(ctype, 0)) {
        current_statement__ = 87;
        if (is_warped) {
          current_statement__ = 85;
          assign(X, nil_index_list(), x_unnorm[(idx_cont - 1)],
            "assigning variable X");
        } else {
          current_statement__ = 83;
          assign(X, nil_index_list(), x[(idx_cont - 1)],
            "assigning variable X");
        }
      } 
      current_statement__ = 101;
      if (is_warped) {
        local_scalar_t__ s;
        s = DUMMY_VAR__;
        
        current_statement__ = 91;
        idx_wrp = (idx_wrp + 1);
        current_statement__ = 94;
        if (is_uncrt) {
          current_statement__ = 92;
          assign(X, nil_index_list(),
            STAN_edit_x_cont(stan::model::deep_copy(X), idx_expand,
              teff_zero[(1 - 1)], teff[(1 - 1)], pstream__),
            "assigning variable X");
        } 
        current_statement__ = 95;
        s = wrp[(idx_wrp - 1)];
        current_statement__ = 98;
        if (is_var_masked) {
          current_statement__ = 96;
          assign(K_diag, nil_index_list(),
            elt_multiply(stan::model::deep_copy(K_diag),
              STAN_kernel_varmask_diag(X, s, vm_params, pstream__)),
            "assigning variable K_diag");
        } 
        current_statement__ = 99;
        assign(X, nil_index_list(),
          STAN_warp_input(stan::model::deep_copy(X), s, pstream__),
          "assigning variable X");
      } 
      current_statement__ = 102;
      idx_alpha = (idx_alpha + 1);
      current_statement__ = 107;
      if (logical_neq(ctype, 0)) {
        current_statement__ = 105;
        assign(K_diag, nil_index_list(),
          elt_multiply(stan::model::deep_copy(K_diag),
            STAN_kernel_eq_diag(n, alpha[(idx_alpha - 1)], pstream__)),
          "assigning variable K_diag");
      } else {
        current_statement__ = 103;
        assign(K_diag, nil_index_list(),
          multiply(square(alpha[(idx_alpha - 1)]),
            stan::model::deep_copy(K_diag)), "assigning variable K_diag");
      }
      current_statement__ = 110;
      if (is_heter) {
        current_statement__ = 108;
        assign(K_diag, nil_index_list(),
          elt_multiply(stan::model::deep_copy(K_diag),
            STAN_kernel_beta_diag(beta[(1 - 1)], idx_expand, pstream__)),
          "assigning variable K_diag");
      } 
      current_statement__ = 111;
      assign(KX_diag, cons_list(index_uni(j), nil_index_list()), K_diag,
        "assigning variable KX_diag");}
    current_statement__ = 114;
    return KX_diag;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_all_diag_functor__ {
template <typename T5__, typename T6__, typename T7__, typename T8__>
std::vector<Eigen::Matrix<stan::promote_args_t<T5__, T6__, T7__,
T8__>, -1, 1>>
operator()(const int& n,
           const std::vector<Eigen::Matrix<double, -1, 1>>& K_const_diag,
           const std::vector<std::vector<int>>& components,
           const std::vector<Eigen::Matrix<double, -1, 1>>& x,
           const std::vector<Eigen::Matrix<double, -1, 1>>& x_unnorm,
           const std::vector<T5__>& alpha, const std::vector<T6__>& wrp,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& beta,
           const std::vector<Eigen::Matrix<T8__, -1, 1>>& teff,
           const std::vector<double>& vm_params,
           const std::vector<int>& idx_expand,
           const std::vector<Eigen::Matrix<double, -1, 1>>& teff_zero,
           std::ostream* pstream__)  const 
{
return STAN_kernel_all_diag(n, K_const_diag, components, x, x_unnorm, alpha,
         wrp, beta, teff, vm_params, idx_expand, teff_zero, pstream__);
}
};
Eigen::Matrix<double, -1, -1>
STAN_kernel_zerosum(const std::vector<int>& x1, const std::vector<int>& x2,
                    const int& num_cat, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n1;
    n1 = std::numeric_limits<int>::min();
    
    current_statement__ = 116;
    n1 = stan::math::size(x1);
    int n2;
    n2 = std::numeric_limits<int>::min();
    
    current_statement__ = 117;
    n2 = stan::math::size(x2);
    current_statement__ = 118;
    validate_non_negative_index("K", "n1", n1);
    current_statement__ = 119;
    validate_non_negative_index("K", "n2", n2);
    Eigen::Matrix<local_scalar_t__, -1, -1> K;
    K = Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n2);
    stan::math::fill(K, DUMMY_VAR__);
    
    current_statement__ = 129;
    for (int i = 1; i <= n1; ++i) {
      current_statement__ = 127;
      for (int j = 1; j <= n2; ++j) {
        current_statement__ = 125;
        if (logical_eq(x1[(i - 1)], x2[(j - 1)])) {
          current_statement__ = 123;
          assign(K,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())), 1,
            "assigning variable K");
        } else {
          current_statement__ = 121;
          assign(K,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            -inv((num_cat - 1)), "assigning variable K");
        }}}
    current_statement__ = 130;
    return K;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_zerosum_functor__ {
Eigen::Matrix<double, -1, -1>
operator()(const std::vector<int>& x1, const std::vector<int>& x2,
           const int& num_cat, std::ostream* pstream__)  const 
{
return STAN_kernel_zerosum(x1, x2, num_cat, pstream__);
}
};
Eigen::Matrix<double, -1, -1>
STAN_kernel_cat(const std::vector<int>& x1, const std::vector<int>& x2,
                std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n1;
    n1 = std::numeric_limits<int>::min();
    
    current_statement__ = 132;
    n1 = stan::math::size(x1);
    int n2;
    n2 = std::numeric_limits<int>::min();
    
    current_statement__ = 133;
    n2 = stan::math::size(x2);
    current_statement__ = 134;
    validate_non_negative_index("K", "n1", n1);
    current_statement__ = 135;
    validate_non_negative_index("K", "n2", n2);
    Eigen::Matrix<local_scalar_t__, -1, -1> K;
    K = Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n2);
    stan::math::fill(K, DUMMY_VAR__);
    
    current_statement__ = 141;
    for (int i = 1; i <= n1; ++i) {
      current_statement__ = 139;
      for (int j = 1; j <= n2; ++j) {
        current_statement__ = 137;
        assign(K,
          cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())),
          logical_eq(x1[(i - 1)], x2[(j - 1)]), "assigning variable K");}}
    current_statement__ = 142;
    return K;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_cat_functor__ {
Eigen::Matrix<double, -1, -1>
operator()(const std::vector<int>& x1, const std::vector<int>& x2,
           std::ostream* pstream__)  const 
{
return STAN_kernel_cat(x1, x2, pstream__);
}
};
Eigen::Matrix<double, -1, -1>
STAN_kernel_bin(const std::vector<int>& x1, const std::vector<int>& x2,
                std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n1;
    n1 = std::numeric_limits<int>::min();
    
    current_statement__ = 144;
    n1 = stan::math::size(x1);
    int n2;
    n2 = std::numeric_limits<int>::min();
    
    current_statement__ = 145;
    n2 = stan::math::size(x2);
    current_statement__ = 146;
    validate_non_negative_index("K", "n1", n1);
    current_statement__ = 147;
    validate_non_negative_index("K", "n2", n2);
    Eigen::Matrix<local_scalar_t__, -1, -1> K;
    K = Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n2);
    stan::math::fill(K, DUMMY_VAR__);
    
    current_statement__ = 153;
    for (int i = 1; i <= n1; ++i) {
      current_statement__ = 151;
      for (int j = 1; j <= n2; ++j) {
        current_statement__ = 149;
        assign(K,
          cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())),
          (logical_eq(x1[(i - 1)], 0) * logical_eq(x2[(j - 1)], 0)),
          "assigning variable K");}}
    current_statement__ = 154;
    return K;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_bin_functor__ {
Eigen::Matrix<double, -1, -1>
operator()(const std::vector<int>& x1, const std::vector<int>& x2,
           std::ostream* pstream__)  const 
{
return STAN_kernel_bin(x1, x2, pstream__);
}
};
Eigen::Matrix<double, -1, -1>
STAN_kernel_const(const std::vector<int>& x1, const std::vector<int>& x2,
                  const int& kernel_type, const int& ncat,
                  std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n1;
    n1 = std::numeric_limits<int>::min();
    
    current_statement__ = 156;
    n1 = num_elements(x1);
    int n2;
    n2 = std::numeric_limits<int>::min();
    
    current_statement__ = 157;
    n2 = num_elements(x2);
    current_statement__ = 158;
    validate_non_negative_index("K", "n1", n1);
    current_statement__ = 159;
    validate_non_negative_index("K", "n2", n2);
    Eigen::Matrix<local_scalar_t__, -1, -1> K;
    K = Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n2);
    stan::math::fill(K, DUMMY_VAR__);
    
    current_statement__ = 168;
    if (logical_eq(kernel_type, 1)) {
      current_statement__ = 166;
      assign(K, nil_index_list(), STAN_kernel_cat(x1, x2, pstream__),
        "assigning variable K");
    } else {
      current_statement__ = 165;
      if (logical_eq(kernel_type, 2)) {
        current_statement__ = 163;
        assign(K, nil_index_list(), STAN_kernel_bin(x1, x2, pstream__),
          "assigning variable K");
      } else {
        current_statement__ = 161;
        assign(K, nil_index_list(),
          STAN_kernel_zerosum(x1, x2, ncat, pstream__),
          "assigning variable K");
      }
    }
    current_statement__ = 169;
    return K;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_const_functor__ {
Eigen::Matrix<double, -1, -1>
operator()(const std::vector<int>& x1, const std::vector<int>& x2,
           const int& kernel_type, const int& ncat, std::ostream* pstream__)  const 
{
return STAN_kernel_const(x1, x2, kernel_type, ncat, pstream__);
}
};
std::vector<Eigen::Matrix<double, -1, -1>>
STAN_kernel_const_all(const int& n1, const int& n2,
                      const std::vector<std::vector<int>>& x1,
                      const std::vector<std::vector<int>>& x2,
                      const std::vector<std::vector<int>>& x1_mask,
                      const std::vector<std::vector<int>>& x2_mask,
                      const std::vector<int>& num_levels,
                      const std::vector<std::vector<int>>& components,
                      std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int num_comps;
    num_comps = std::numeric_limits<int>::min();
    
    current_statement__ = 171;
    num_comps = stan::math::size(components);
    current_statement__ = 172;
    validate_non_negative_index("K_const", "num_comps", num_comps);
    current_statement__ = 173;
    validate_non_negative_index("K_const", "n1", n1);
    current_statement__ = 174;
    validate_non_negative_index("K_const", "n2", n2);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> K_const;
    K_const = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(num_comps, Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n2));
    stan::math::fill(K_const, DUMMY_VAR__);
    
    current_statement__ = 195;
    for (int j = 1; j <= num_comps; ++j) {
      current_statement__ = 176;
      validate_non_negative_index("K", "n1", n1);
      current_statement__ = 177;
      validate_non_negative_index("K", "n2", n2);
      Eigen::Matrix<local_scalar_t__, -1, -1> K;
      K = Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n2);
      stan::math::fill(K, DUMMY_VAR__);
      
      std::vector<int> opts;
      opts = std::vector<int>(9, std::numeric_limits<int>::min());
      
      current_statement__ = 179;
      assign(opts, nil_index_list(), components[(j - 1)],
        "assigning variable opts");
      int ctype;
      ctype = std::numeric_limits<int>::min();
      
      current_statement__ = 180;
      ctype = opts[(1 - 1)];
      int ktype;
      ktype = std::numeric_limits<int>::min();
      
      current_statement__ = 181;
      ktype = opts[(2 - 1)];
      int idx_cat;
      idx_cat = std::numeric_limits<int>::min();
      
      current_statement__ = 182;
      idx_cat = opts[(8 - 1)];
      int idx_cont;
      idx_cont = std::numeric_limits<int>::min();
      
      current_statement__ = 183;
      idx_cont = opts[(9 - 1)];
      current_statement__ = 188;
      if (logical_neq(idx_cont, 0)) {
        current_statement__ = 186;
        assign(K, nil_index_list(),
          STAN_kernel_const(x1_mask[(idx_cont - 1)], x2_mask[(idx_cont - 1)],
            2, 0, pstream__), "assigning variable K");
      } else {
        current_statement__ = 184;
        assign(K, nil_index_list(), rep_matrix(1, n1, n2),
          "assigning variable K");
      }
      current_statement__ = 192;
      if ((primitive_value(logical_eq(ctype, 0)) || primitive_value(
          logical_eq(ctype, 2)))) {
        int M;
        M = std::numeric_limits<int>::min();
        
        current_statement__ = 189;
        M = num_levels[(idx_cat - 1)];
        current_statement__ = 190;
        assign(K, nil_index_list(),
          elt_multiply(stan::model::deep_copy(K),
            STAN_kernel_const(x1[(idx_cat - 1)], x2[(idx_cat - 1)], ktype,
              M, pstream__)), "assigning variable K");
      } 
      current_statement__ = 193;
      assign(K_const, cons_list(index_uni(j), nil_index_list()), K,
        "assigning variable K_const");}
    current_statement__ = 196;
    return K_const;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_const_all_functor__ {
std::vector<Eigen::Matrix<double, -1, -1>>
operator()(const int& n1, const int& n2,
           const std::vector<std::vector<int>>& x1,
           const std::vector<std::vector<int>>& x2,
           const std::vector<std::vector<int>>& x1_mask,
           const std::vector<std::vector<int>>& x2_mask,
           const std::vector<int>& num_levels,
           const std::vector<std::vector<int>>& components,
           std::ostream* pstream__)  const 
{
return STAN_kernel_const_all(n1, n2, x1, x2, x1_mask, x2_mask, num_levels,
         components, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__,
T3__>, -1, -1>
STAN_kernel_eq(const T0__& x1_arg__, const T1__& x2_arg__, const T2__& alpha,
               const T3__& ell, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__,
          T3__>;
  const auto& x1 = to_ref(x1_arg__);
  const auto& x2 = to_ref(x2_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 198;
    return gp_exp_quad_cov(to_array_1d(x1), to_array_1d(x2), alpha, ell);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_eq_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__,
T3__>, -1, -1>
operator()(const T0__& x1, const T1__& x2, const T2__& alpha,
           const T3__& ell, std::ostream* pstream__)  const 
{
return STAN_kernel_eq(x1, x2, alpha, ell, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, -1>
STAN_kernel_varmask(const T0__& x1_arg__, const T1__& x2_arg__,
                    const T2__& steepness,
                    const std::vector<double>& vm_params,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  const auto& x1 = to_ref(x1_arg__);
  const auto& x2 = to_ref(x2_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 200;
    a = (steepness * vm_params[(2 - 1)]);
    local_scalar_t__ r;
    r = DUMMY_VAR__;
    
    current_statement__ = 201;
    r = (inv(a) * logit(vm_params[(1 - 1)]));
    current_statement__ = 202;
    return multiply(
             to_matrix(
               to_matrix(STAN_var_mask(subtract(x1, r), a, pstream__))),
             transpose(
               to_matrix(STAN_var_mask(subtract(x2, r), a, pstream__))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_varmask_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, -1>
operator()(const T0__& x1, const T1__& x2, const T2__& steepness,
           const std::vector<double>& vm_params, std::ostream* pstream__)  const 
{
return STAN_kernel_varmask(x1, x2, steepness, vm_params, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
STAN_kernel_beta(const T0__& beta_arg__, const std::vector<int>& idx1_expand,
                 const std::vector<int>& idx2_expand, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& beta = to_ref(beta_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 204;
    return multiply(
             to_matrix(
               STAN_expand(stan::math::sqrt(beta), idx1_expand, pstream__)),
             transpose(
               to_matrix(
                 STAN_expand(stan::math::sqrt(beta), idx2_expand, pstream__))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_beta_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
operator()(const T0__& beta, const std::vector<int>& idx1_expand,
           const std::vector<int>& idx2_expand, std::ostream* pstream__)  const 
{
return STAN_kernel_beta(beta, idx1_expand, idx2_expand, pstream__);
}
};
template <typename T8__, typename T9__, typename T10__, typename T11__,
typename T12__>
std::vector<Eigen::Matrix<stan::promote_args_t<T8__, T9__, T10__, T11__,
T12__>, -1, -1>>
STAN_kernel_all(const int& n1, const int& n2,
                const std::vector<Eigen::Matrix<double, -1, -1>>& K_const,
                const std::vector<std::vector<int>>& components,
                const std::vector<Eigen::Matrix<double, -1, 1>>& x1,
                const std::vector<Eigen::Matrix<double, -1, 1>>& x2,
                const std::vector<Eigen::Matrix<double, -1, 1>>& x1_unnorm,
                const std::vector<Eigen::Matrix<double, -1, 1>>& x2_unnorm,
                const std::vector<T8__>& alpha, const std::vector<T9__>& ell,
                const std::vector<T10__>& wrp,
                const std::vector<Eigen::Matrix<T11__, -1, 1>>& beta,
                const std::vector<Eigen::Matrix<T12__, -1, 1>>& teff,
                const std::vector<double>& vm_params,
                const std::vector<int>& idx1_expand,
                const std::vector<int>& idx2_expand,
                const std::vector<Eigen::Matrix<double, -1, 1>>& teff_zero,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T8__,
          T9__,
          T10__,
          T11__,
          T12__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int idx_ell;
    idx_ell = std::numeric_limits<int>::min();
    
    current_statement__ = 206;
    idx_ell = 0;
    int idx_wrp;
    idx_wrp = std::numeric_limits<int>::min();
    
    current_statement__ = 207;
    idx_wrp = 0;
    int idx_alpha;
    idx_alpha = std::numeric_limits<int>::min();
    
    current_statement__ = 208;
    idx_alpha = 0;
    int num_comps;
    num_comps = std::numeric_limits<int>::min();
    
    current_statement__ = 209;
    num_comps = stan::math::size(components);
    current_statement__ = 210;
    validate_non_negative_index("KX", "num_comps", num_comps);
    current_statement__ = 211;
    validate_non_negative_index("KX", "n1", n1);
    current_statement__ = 212;
    validate_non_negative_index("KX", "n2", n2);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> KX;
    KX = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(num_comps, Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n2));
    stan::math::fill(KX, DUMMY_VAR__);
    
    current_statement__ = 263;
    for (int j = 1; j <= num_comps; ++j) {
      current_statement__ = 214;
      validate_non_negative_index("K", "n1", n1);
      current_statement__ = 215;
      validate_non_negative_index("K", "n2", n2);
      Eigen::Matrix<local_scalar_t__, -1, -1> K;
      K = Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n2);
      stan::math::fill(K, DUMMY_VAR__);
      
      current_statement__ = 216;
      assign(K, nil_index_list(), K_const[(j - 1)], "assigning variable K");
      current_statement__ = 217;
      validate_non_negative_index("X1", "n1", n1);
      Eigen::Matrix<local_scalar_t__, -1, 1> X1;
      X1 = Eigen::Matrix<local_scalar_t__, -1, 1>(n1);
      stan::math::fill(X1, DUMMY_VAR__);
      
      current_statement__ = 219;
      validate_non_negative_index("X2", "n2", n2);
      Eigen::Matrix<local_scalar_t__, -1, 1> X2;
      X2 = Eigen::Matrix<local_scalar_t__, -1, 1>(n2);
      stan::math::fill(X2, DUMMY_VAR__);
      
      std::vector<int> opts;
      opts = std::vector<int>(9, std::numeric_limits<int>::min());
      
      current_statement__ = 221;
      assign(opts, nil_index_list(), components[(j - 1)],
        "assigning variable opts");
      int ctype;
      ctype = std::numeric_limits<int>::min();
      
      current_statement__ = 222;
      ctype = opts[(1 - 1)];
      int idx_cont;
      idx_cont = std::numeric_limits<int>::min();
      
      current_statement__ = 223;
      idx_cont = opts[(9 - 1)];
      int is_heter;
      is_heter = std::numeric_limits<int>::min();
      
      current_statement__ = 224;
      is_heter = opts[(4 - 1)];
      int is_warped;
      is_warped = std::numeric_limits<int>::min();
      
      current_statement__ = 225;
      is_warped = opts[(5 - 1)];
      int is_var_masked;
      is_var_masked = std::numeric_limits<int>::min();
      
      current_statement__ = 226;
      is_var_masked = opts[(6 - 1)];
      int is_uncrt;
      is_uncrt = std::numeric_limits<int>::min();
      
      current_statement__ = 227;
      is_uncrt = opts[(7 - 1)];
      current_statement__ = 236;
      if (logical_neq(ctype, 0)) {
        current_statement__ = 234;
        if (is_warped) {
          current_statement__ = 231;
          assign(X1, nil_index_list(), x1_unnorm[(idx_cont - 1)],
            "assigning variable X1");
          current_statement__ = 232;
          assign(X2, nil_index_list(), x2_unnorm[(idx_cont - 1)],
            "assigning variable X2");
        } else {
          current_statement__ = 228;
          assign(X1, nil_index_list(), x1[(idx_cont - 1)],
            "assigning variable X1");
          current_statement__ = 229;
          assign(X2, nil_index_list(), x2[(idx_cont - 1)],
            "assigning variable X2");
        }
      } 
      current_statement__ = 250;
      if (is_warped) {
        local_scalar_t__ s;
        s = DUMMY_VAR__;
        
        current_statement__ = 238;
        idx_wrp = (idx_wrp + 1);
        current_statement__ = 242;
        if (is_uncrt) {
          current_statement__ = 239;
          assign(X1, nil_index_list(),
            STAN_edit_x_cont(stan::model::deep_copy(X1), idx1_expand,
              teff_zero[(1 - 1)], teff[(1 - 1)], pstream__),
            "assigning variable X1");
          current_statement__ = 240;
          assign(X2, nil_index_list(),
            STAN_edit_x_cont(stan::model::deep_copy(X2), idx2_expand,
              teff_zero[(1 - 1)], teff[(1 - 1)], pstream__),
            "assigning variable X2");
        } 
        current_statement__ = 243;
        s = wrp[(idx_wrp - 1)];
        current_statement__ = 246;
        if (is_var_masked) {
          current_statement__ = 244;
          assign(K, nil_index_list(),
            elt_multiply(stan::model::deep_copy(K),
              STAN_kernel_varmask(X1, X2, s, vm_params, pstream__)),
            "assigning variable K");
        } 
        current_statement__ = 247;
        assign(X1, nil_index_list(),
          STAN_warp_input(stan::model::deep_copy(X1), s, pstream__),
          "assigning variable X1");
        current_statement__ = 248;
        assign(X2, nil_index_list(),
          STAN_warp_input(stan::model::deep_copy(X2), s, pstream__),
          "assigning variable X2");
      } 
      current_statement__ = 251;
      idx_alpha = (idx_alpha + 1);
      current_statement__ = 257;
      if (logical_neq(ctype, 0)) {
        current_statement__ = 254;
        idx_ell = (idx_ell + 1);
        current_statement__ = 255;
        assign(K, nil_index_list(),
          elt_multiply(stan::model::deep_copy(K),
            STAN_kernel_eq(X1, X2, alpha[(idx_alpha - 1)],
              ell[(idx_ell - 1)], pstream__)), "assigning variable K");
      } else {
        current_statement__ = 252;
        assign(K, nil_index_list(),
          multiply(square(alpha[(idx_alpha - 1)]), stan::model::deep_copy(K)),
          "assigning variable K");
      }
      current_statement__ = 260;
      if (is_heter) {
        current_statement__ = 258;
        assign(K, nil_index_list(),
          elt_multiply(stan::model::deep_copy(K),
            STAN_kernel_beta(beta[(1 - 1)], idx1_expand,
              idx2_expand, pstream__)), "assigning variable K");
      } 
      current_statement__ = 261;
      assign(KX, cons_list(index_uni(j), nil_index_list()), K,
        "assigning variable KX");}
    current_statement__ = 264;
    return KX;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_kernel_all_functor__ {
template <typename T8__, typename T9__, typename T10__, typename T11__,
typename T12__>
std::vector<Eigen::Matrix<stan::promote_args_t<T8__, T9__, T10__, T11__,
T12__>, -1, -1>>
operator()(const int& n1, const int& n2,
           const std::vector<Eigen::Matrix<double, -1, -1>>& K_const,
           const std::vector<std::vector<int>>& components,
           const std::vector<Eigen::Matrix<double, -1, 1>>& x1,
           const std::vector<Eigen::Matrix<double, -1, 1>>& x2,
           const std::vector<Eigen::Matrix<double, -1, 1>>& x1_unnorm,
           const std::vector<Eigen::Matrix<double, -1, 1>>& x2_unnorm,
           const std::vector<T8__>& alpha, const std::vector<T9__>& ell,
           const std::vector<T10__>& wrp,
           const std::vector<Eigen::Matrix<T11__, -1, 1>>& beta,
           const std::vector<Eigen::Matrix<T12__, -1, 1>>& teff,
           const std::vector<double>& vm_params,
           const std::vector<int>& idx1_expand,
           const std::vector<int>& idx2_expand,
           const std::vector<Eigen::Matrix<double, -1, 1>>& teff_zero,
           std::ostream* pstream__)  const 
{
return STAN_kernel_all(n1, n2, K_const, components, x1, x2, x1_unnorm,
         x2_unnorm, alpha, ell, wrp, beta, teff, vm_params, idx1_expand,
         idx2_expand, teff_zero, pstream__);
}
};
template <typename T0__>
stan::promote_args_t<T0__>
STAN_log_prior(const T0__& x, const std::vector<int>& types,
               const std::vector<double>& p, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ log_prior;
    log_prior = DUMMY_VAR__;
    
    current_statement__ = 266;
    log_prior = 0;
    local_scalar_t__ t;
    t = DUMMY_VAR__;
    
    current_statement__ = 267;
    t = x;
    current_statement__ = 271;
    if (logical_eq(types[(2 - 1)], 1)) {
      current_statement__ = 268;
      log_prior = (log_prior + stan::math::log(stan::math::abs((2 * x))));
      current_statement__ = 269;
      t = square(x);
    } 
    current_statement__ = 286;
    if (logical_eq(types[(1 - 1)], 2)) {
      current_statement__ = 284;
      log_prior = (log_prior + normal_lpdf<false>(t, p[(1 - 1)], p[(2 - 1)]));
    } else {
      current_statement__ = 283;
      if (logical_eq(types[(1 - 1)], 3)) {
        current_statement__ = 281;
        log_prior = (log_prior +
                      student_t_lpdf<false>(t, p[(1 - 1)], 0.0, 1.0));
      } else {
        current_statement__ = 280;
        if (logical_eq(types[(1 - 1)], 4)) {
          current_statement__ = 278;
          log_prior = (log_prior +
                        gamma_lpdf<false>(t, p[(1 - 1)], p[(2 - 1)]));
        } else {
          current_statement__ = 277;
          if (logical_eq(types[(1 - 1)], 5)) {
            current_statement__ = 275;
            log_prior = (log_prior +
                          inv_gamma_lpdf<false>(t, p[(1 - 1)], p[(2 - 1)]));
          } else {
            current_statement__ = 274;
            if (logical_eq(types[(1 - 1)], 6)) {
              current_statement__ = 272;
              log_prior = (log_prior +
                            lognormal_lpdf<false>(t, p[(1 - 1)], p[(2 - 1)]));
            } 
          }
        }
      }
    }
    current_statement__ = 287;
    return log_prior;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_log_prior_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, const std::vector<int>& types,
           const std::vector<double>& p, std::ostream* pstream__)  const 
{
return STAN_log_prior(x, types, p, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
STAN_vectorsum(const std::vector<Eigen::Matrix<T0__, -1, 1>>& vecs,
               const int& L, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int num_vecs;
    num_vecs = std::numeric_limits<int>::min();
    
    current_statement__ = 289;
    num_vecs = stan::math::size(vecs);
    current_statement__ = 290;
    validate_non_negative_index("s", "L", L);
    Eigen::Matrix<local_scalar_t__, -1, 1> s;
    s = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
    stan::math::fill(s, DUMMY_VAR__);
    
    current_statement__ = 291;
    assign(s, nil_index_list(), rep_vector(0, L), "assigning variable s");
    current_statement__ = 294;
    for (int j = 1; j <= num_vecs; ++j) {
      current_statement__ = 292;
      assign(s, nil_index_list(),
        add(stan::model::deep_copy(s), vecs[(j - 1)]), "assigning variable s");
    }
    current_statement__ = 295;
    return s;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_vectorsum_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& vecs, const int& L,
           std::ostream* pstream__)  const 
{
return STAN_vectorsum(vecs, L, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, -1>
STAN_matrix_array_sum(const std::vector<Eigen::Matrix<T0__, -1, -1>>& K,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n1;
    n1 = std::numeric_limits<int>::min();
    
    current_statement__ = 297;
    n1 = rows(K[(1 - 1)]);
    int n2;
    n2 = std::numeric_limits<int>::min();
    
    current_statement__ = 298;
    n2 = cols(K[(1 - 1)]);
    current_statement__ = 299;
    validate_non_negative_index("K_sum", "n1", n1);
    current_statement__ = 300;
    validate_non_negative_index("K_sum", "n2", n2);
    Eigen::Matrix<local_scalar_t__, -1, -1> K_sum;
    K_sum = Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n2);
    stan::math::fill(K_sum, DUMMY_VAR__);
    
    current_statement__ = 301;
    assign(K_sum, nil_index_list(), K[(1 - 1)], "assigning variable K_sum");
    current_statement__ = 304;
    for (int j = 2; j <= stan::math::size(K); ++j) {
      current_statement__ = 302;
      assign(K_sum, nil_index_list(),
        add(stan::model::deep_copy(K_sum), K[(j - 1)]),
        "assigning variable K_sum");}
    current_statement__ = 305;
    return K_sum;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_matrix_array_sum_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, -1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& K,
           std::ostream* pstream__)  const 
{
return STAN_matrix_array_sum(K, pstream__);
}
};
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>, double>, -1, 1>  STAN_var_mask(const Eigen::Matrix<double, -1, 1>& x, const double& a,
                   std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_var_mask(x,
                                                              a, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>>, -1, 1>  STAN_expand(const Eigen::Matrix<double, -1, 1>& v,
                 const std::vector<int>& idx_expand,
                 std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_expand(v,
                                                              idx_expand,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>, double>, -1, 1>  STAN_warp_input(const Eigen::Matrix<double, -1, 1>& x, const double& a,
                     std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_warp_input(
                                                              x, a,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>>, -1, 1>  STAN_edit_x_cont(const Eigen::Matrix<double, -1, 1>& x_cont,
                      const std::vector<int>& idx_expand,
                      const Eigen::Matrix<double, -1, 1>& teff_obs,
                      const Eigen::Matrix<double, -1, 1>& teff,
                      std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_edit_x_cont(
                                                              x_cont,
                                                              idx_expand,
                                                              teff_obs, teff,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double, -1, 1>  STAN_kernel_const_diag(const std::vector<int>& x,
                            const int& kernel_type,
                            std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_const_diag(
                                                              x, kernel_type,
                                                              pstream__);
}
// [[Rcpp::export]]
 std::vector<Eigen::Matrix<double, -1, 1>>  STAN_kernel_const_all_diag(const int& n,
                                const std::vector<std::vector<int>>& x,
                                const std::vector<std::vector<int>>& x_mask,
                                const std::vector<std::vector<int>>& components,
                                std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_const_all_diag(
                                                              n, x, x_mask,
                                                              components,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<double>, -1, 1>  STAN_kernel_eq_diag(const int& n, const double& alpha,
                         std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_eq_diag(
                                                              n, alpha,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>, double>, -1, 1>  STAN_kernel_varmask_diag(const Eigen::Matrix<double, -1, 1>& x,
                              const double& steepness,
                              const std::vector<double>& vm_params,
                              std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_varmask_diag(
                                                              x, steepness,
                                                              vm_params,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>>, -1, 1>  STAN_kernel_beta_diag(const Eigen::Matrix<double, -1, 1>& beta,
                           const std::vector<int>& idx_expand,
                           std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_beta_diag(
                                                              beta,
                                                              idx_expand,
                                                              pstream__);
}
// [[Rcpp::export]]
 std::vector<Eigen::Matrix<stan::promote_args_t<double, double, double, double>, -1, 1>>  STAN_kernel_all_diag(const int& n,
                          const std::vector<Eigen::Matrix<double, -1, 1>>& K_const_diag,
                          const std::vector<std::vector<int>>& components,
                          const std::vector<Eigen::Matrix<double, -1, 1>>& x,
                          const std::vector<Eigen::Matrix<double, -1, 1>>& x_unnorm,
                          const std::vector<double>& alpha,
                          const std::vector<double>& wrp,
                          const std::vector<Eigen::Matrix<double, -1, 1>>& beta,
                          const std::vector<Eigen::Matrix<double, -1, 1>>& teff,
                          const std::vector<double>& vm_params,
                          const std::vector<int>& idx_expand,
                          const std::vector<Eigen::Matrix<double, -1, 1>>& teff_zero,
                          std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_all_diag(
                                                              n,
                                                              K_const_diag,
                                                              components, x,
                                                              x_unnorm,
                                                              alpha, wrp,
                                                              beta, teff,
                                                              vm_params,
                                                              idx_expand,
                                                              teff_zero,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double, -1, -1>  STAN_kernel_zerosum(const std::vector<int>& x1,
                         const std::vector<int>& x2, const int& num_cat,
                         std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_zerosum(
                                                              x1, x2,
                                                              num_cat,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double, -1, -1>  STAN_kernel_cat(const std::vector<int>& x1, const std::vector<int>& x2,
                     std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_cat(
                                                              x1, x2,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double, -1, -1>  STAN_kernel_bin(const std::vector<int>& x1, const std::vector<int>& x2,
                     std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_bin(
                                                              x1, x2,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double, -1, -1>  STAN_kernel_const(const std::vector<int>& x1,
                       const std::vector<int>& x2, const int& kernel_type,
                       const int& ncat, std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_const(
                                                              x1, x2,
                                                              kernel_type,
                                                              ncat,
                                                              pstream__);
}
// [[Rcpp::export]]
 std::vector<Eigen::Matrix<double, -1, -1>>  STAN_kernel_const_all(const int& n1, const int& n2,
                           const std::vector<std::vector<int>>& x1,
                           const std::vector<std::vector<int>>& x2,
                           const std::vector<std::vector<int>>& x1_mask,
                           const std::vector<std::vector<int>>& x2_mask,
                           const std::vector<int>& num_levels,
                           const std::vector<std::vector<int>>& components,
                           std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_const_all(
                                                              n1, n2, x1, x2,
                                                              x1_mask,
                                                              x2_mask,
                                                              num_levels,
                                                              components,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>, stan::value_type_t<double>, double, double>, -1, -1>  STAN_kernel_eq(const Eigen::Matrix<double, -1, 1>& x1,
                    const Eigen::Matrix<double, -1, 1>& x2,
                    const double& alpha, const double& ell,
                    std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_eq(
                                                              x1, x2, alpha,
                                                              ell, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>, stan::value_type_t<double>, double>, -1, -1>  STAN_kernel_varmask(const Eigen::Matrix<double, -1, 1>& x1,
                         const Eigen::Matrix<double, -1, 1>& x2,
                         const double& steepness,
                         const std::vector<double>& vm_params,
                         std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_varmask(
                                                              x1, x2,
                                                              steepness,
                                                              vm_params,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>>, -1, -1>  STAN_kernel_beta(const Eigen::Matrix<double, -1, 1>& beta,
                      const std::vector<int>& idx1_expand,
                      const std::vector<int>& idx2_expand,
                      std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_beta(
                                                              beta,
                                                              idx1_expand,
                                                              idx2_expand,
                                                              pstream__);
}
// [[Rcpp::export]]
 std::vector<Eigen::Matrix<stan::promote_args_t<double, double, double, double, double>, -1, -1>>  STAN_kernel_all(const int& n1, const int& n2,
                     const std::vector<Eigen::Matrix<double, -1, -1>>& K_const,
                     const std::vector<std::vector<int>>& components,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& x1,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& x2,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& x1_unnorm,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& x2_unnorm,
                     const std::vector<double>& alpha,
                     const std::vector<double>& ell,
                     const std::vector<double>& wrp,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& beta,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& teff,
                     const std::vector<double>& vm_params,
                     const std::vector<int>& idx1_expand,
                     const std::vector<int>& idx2_expand,
                     const std::vector<Eigen::Matrix<double, -1, 1>>& teff_zero,
                     std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_kernel_all(
                                                              n1, n2,
                                                              K_const,
                                                              components, x1,
                                                              x2, x1_unnorm,
                                                              x2_unnorm,
                                                              alpha, ell,
                                                              wrp, beta,
                                                              teff,
                                                              vm_params,
                                                              idx1_expand,
                                                              idx2_expand,
                                                              teff_zero,
                                                              pstream__);
}
// [[Rcpp::export]]
 stan::promote_args_t<double>  STAN_log_prior(const double& x, const std::vector<int>& types,
                    const std::vector<double>& p,
                    std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_log_prior(x,
                                                              types, p,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<double>, -1, 1>  STAN_vectorsum(const std::vector<Eigen::Matrix<double, -1, 1>>& vecs,
                    const int& L, std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_vectorsum(
                                                              vecs, L,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<double>, -1, -1>  STAN_matrix_array_sum(const std::vector<Eigen::Matrix<double, -1, -1>>& K,
                           std::ostream* pstream__ = 0)  
{
 return model58cd35ad97db_User_defined_functions_namespace::STAN_matrix_array_sum(
                                                              K, pstream__);
}
