// Generated by rstantools.  Do not edit by hand.

// [[Rcpp::depends(StanHeaders)]]
// [[Rcpp::depends(rstan)]]
// [[Rcpp::plugins(rstan)]]
// [[Rcpp::depends(RcppEigen)]]
// [[Rcpp::depends(BH)]]
#include <stan/math/prim/mat/fun/Eigen.hpp>
#include <boost/integer/integer_log2.hpp>
#include <RcppEigen.h>
// Code generated by Stan version 2.21.0
#include <stan/model/standalone_functions_header.hpp>
namespace user_165a074e42c73f2e80c4c1fff6a8ebfc { 
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using namespace stan::math;
typedef Eigen::Matrix<double, Eigen::Dynamic, 1> vector_d;
typedef Eigen::Matrix<double, 1, Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> matrix_d;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "unknown file name");
    reader.add_event(458, 456, "end", "unknown file name");
    return reader;
}
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 4;
        return stan::math::promote_scalar<fun_return_scalar_t__>(inv(add(1, stan::math::exp(multiply(-(a), x)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_var_mask_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                  const T1__& a, std::ostream* pstream__) const {
        return STAN_var_mask(x, a, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 9;
        int L(0);
        (void) L;  // dummy to suppress unused var warning
        stan::math::fill(L, std::numeric_limits<int>::min());
        stan::math::assign(L,num_elements(v));
        current_statement_begin__ = 10;
        validate_non_negative_index("v_add0", "(L + 1)", (L + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_add0((L + 1));
        stan::math::initialize(v_add0, DUMMY_VAR__);
        stan::math::fill(v_add0, DUMMY_VAR__);
        stan::math::assign(v_add0,rep_vector(0.0, (L + 1)));
        current_statement_begin__ = 11;
        stan::model::assign(v_add0, 
                    stan::model::cons_list(stan::model::index_min_max(2, (L + 1)), stan::model::nil_index_list()), 
                    v, 
                    "assigning variable v_add0");
        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(v_add0, stan::model::cons_list(stan::model::index_multi(idx_expand), stan::model::nil_index_list()), "v_add0"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_expand_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__) const {
        return STAN_expand(v, idx_expand, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 17;
        return stan::math::promote_scalar<fun_return_scalar_t__>(add(-(1), multiply(2, inv(add(1, stan::math::exp(multiply(-(a), x)))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_warp_input_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                    const T1__& a, std::ostream* pstream__) const {
        return STAN_warp_input(x, a, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
STAN_edit_x_cont(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 27;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x_cont));
        current_statement_begin__ = 28;
        validate_non_negative_index("x_teff_obs", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff_obs(n);
        stan::math::initialize(x_teff_obs, DUMMY_VAR__);
        stan::math::fill(x_teff_obs, DUMMY_VAR__);
        stan::math::assign(x_teff_obs,STAN_expand(teff_obs, idx_expand, pstream__));
        current_statement_begin__ = 29;
        validate_non_negative_index("x_teff", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_teff(n);
        stan::math::initialize(x_teff, DUMMY_VAR__);
        stan::math::fill(x_teff, DUMMY_VAR__);
        stan::math::assign(x_teff,STAN_expand(teff, idx_expand, pstream__));
        current_statement_begin__ = 30;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(add(x_cont, x_teff_obs), x_teff));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_edit_x_cont_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& teff, std::ostream* pstream__) const {
        return STAN_edit_x_cont(x_cont, idx_expand, teff_obs, teff, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_kernel_const_diag(const std::vector<int>& x,
                           const int& kernel_type, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 36;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x));
        current_statement_begin__ = 37;
        validate_non_negative_index("K_diag", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> K_diag(n);
        stan::math::initialize(K_diag, DUMMY_VAR__);
        stan::math::fill(K_diag, DUMMY_VAR__);
        stan::math::assign(K_diag,rep_vector(1.0, n));
        current_statement_begin__ = 38;
        if (as_bool(logical_eq(kernel_type, 2))) {
            {
            current_statement_begin__ = 39;
            validate_non_negative_index("is_zero", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> is_zero(n);
            stan::math::initialize(is_zero, DUMMY_VAR__);
            stan::math::fill(is_zero, DUMMY_VAR__);
            current_statement_begin__ = 40;
            for (int j = 1; j <= n; ++j) {
                current_statement_begin__ = 41;
                stan::model::assign(is_zero, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            logical_eq(get_base1(x, j, "x", 1), 0), 
                            "assigning variable is_zero");
            }
            current_statement_begin__ = 43;
            stan::math::assign(K_diag, is_zero);
            }
        }
        current_statement_begin__ = 45;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_diag);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_const_diag_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, 1>
    operator()(const std::vector<int>& x,
                           const int& kernel_type, std::ostream* pstream__) const {
        return STAN_kernel_const_diag(x, kernel_type, pstream__);
    }
};
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
STAN_kernel_const_all_diag(const int& n,
                               const std::vector<std::vector<int> >& x,
                               const std::vector<std::vector<int> >& x_mask,
                               const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 55;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 56;
        validate_non_negative_index("K_const_diag", "n", n);
        validate_non_negative_index("K_const_diag", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > K_const_diag(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
        stan::math::initialize(K_const_diag, DUMMY_VAR__);
        stan::math::fill(K_const_diag, DUMMY_VAR__);
        current_statement_begin__ = 57;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 58;
            validate_non_negative_index("K_diag", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> K_diag(n);
            stan::math::initialize(K_diag, DUMMY_VAR__);
            stan::math::fill(K_diag, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 60;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 61;
            int ktype(0);
            (void) ktype;  // dummy to suppress unused var warning
            stan::math::fill(ktype, std::numeric_limits<int>::min());
            stan::math::assign(ktype,get_base1(opts, 2, "opts", 1));
            current_statement_begin__ = 62;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(opts, 8, "opts", 1));
            current_statement_begin__ = 63;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 66;
            if (as_bool(logical_neq(idx_cont, 0))) {
                current_statement_begin__ = 67;
                stan::math::assign(K_diag, STAN_kernel_const_diag(get_base1(x_mask, idx_cont, "x_mask", 1), 2, pstream__));
            } else {
                current_statement_begin__ = 69;
                stan::math::assign(K_diag, rep_vector(1.0, n));
            }
            current_statement_begin__ = 73;
            if (as_bool((primitive_value(logical_eq(ctype, 0)) || primitive_value(logical_eq(ctype, 2))))) {
                current_statement_begin__ = 74;
                stan::math::assign(K_diag, elt_multiply(K_diag, STAN_kernel_const_diag(get_base1(x, idx_cat, "x", 1), ktype, pstream__)));
            }
            current_statement_begin__ = 76;
            stan::model::assign(K_const_diag, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K_diag, 
                        "assigning variable K_const_diag");
            }
        }
        current_statement_begin__ = 78;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_const_diag);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_const_all_diag_functor__ {
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
    operator()(const int& n,
                               const std::vector<std::vector<int> >& x,
                               const std::vector<std::vector<int> >& x_mask,
                               const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_kernel_const_all_diag(n, x, x_mask, components, pstream__);
    }
};
template <typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic, 1>
STAN_kernel_eq_diag(const int& n,
                        const T1__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 83;
        return stan::math::promote_scalar<fun_return_scalar_t__>(rep_vector(square(alpha), n));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_eq_diag_functor__ {
    template <typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic, 1>
    operator()(const int& n,
                        const T1__& alpha, std::ostream* pstream__) const {
        return STAN_kernel_eq_diag(n, alpha, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
STAN_kernel_varmask_diag(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                             const T1__& steepness,
                             const std::vector<T2__>& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 90;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,(steepness * get_base1(vm_params, 2, "vm_params", 1)));
        current_statement_begin__ = 91;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,(inv(a) * logit(get_base1(vm_params, 1, "vm_params", 1))));
        current_statement_begin__ = 92;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x));
        current_statement_begin__ = 93;
        validate_non_negative_index("f_vm", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> f_vm(n);
        stan::math::initialize(f_vm, DUMMY_VAR__);
        stan::math::fill(f_vm, DUMMY_VAR__);
        stan::math::assign(f_vm,STAN_var_mask(subtract(x, r), a, pstream__));
        current_statement_begin__ = 94;
        return stan::math::promote_scalar<fun_return_scalar_t__>(elt_multiply(f_vm, f_vm));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_varmask_diag_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                             const T1__& steepness,
                             const std::vector<T2__>& vm_params, std::ostream* pstream__) const {
        return STAN_kernel_varmask_diag(x, steepness, vm_params, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_kernel_beta_diag(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                          const std::vector<int>& idx_expand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 99;
        return stan::math::promote_scalar<fun_return_scalar_t__>(STAN_expand(beta, idx_expand, pstream__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_beta_diag_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                          const std::vector<int>& idx_expand, std::ostream* pstream__) const {
        return STAN_kernel_beta_diag(beta, idx_expand, pstream__);
    }
};
template <typename T1__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T11__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T11__>::type>::type>::type, Eigen::Dynamic, 1> >
STAN_kernel_all_diag(const int& n,
                         const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& K_const_diag,
                         const std::vector<std::vector<int> >& components,
                         const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic, 1> >& x,
                         const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x_unnorm,
                         const std::vector<T5__>& alpha,
                         const std::vector<T6__>& wrp,
                         const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& beta,
                         const std::vector<Eigen::Matrix<T8__, Eigen::Dynamic, 1> >& teff,
                         const std::vector<T9__>& vm_params,
                         const std::vector<int>& idx_expand,
                         const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T11__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 119;
        int idx_wrp(0);
        (void) idx_wrp;  // dummy to suppress unused var warning
        stan::math::fill(idx_wrp, std::numeric_limits<int>::min());
        stan::math::assign(idx_wrp,0);
        current_statement_begin__ = 120;
        int idx_alpha(0);
        (void) idx_alpha;  // dummy to suppress unused var warning
        stan::math::fill(idx_alpha, std::numeric_limits<int>::min());
        stan::math::assign(idx_alpha,0);
        current_statement_begin__ = 121;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 122;
        validate_non_negative_index("KX_diag", "n", n);
        validate_non_negative_index("KX_diag", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > KX_diag(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
        stan::math::initialize(KX_diag, DUMMY_VAR__);
        stan::math::fill(KX_diag, DUMMY_VAR__);
        current_statement_begin__ = 125;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 128;
            validate_non_negative_index("K_diag", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> K_diag(n);
            stan::math::initialize(K_diag, DUMMY_VAR__);
            stan::math::fill(K_diag, DUMMY_VAR__);
            stan::math::assign(K_diag,get_base1(K_const_diag, j, "K_const_diag", 1));
            current_statement_begin__ = 129;
            validate_non_negative_index("X", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X(n);
            stan::math::initialize(X, DUMMY_VAR__);
            stan::math::fill(X, DUMMY_VAR__);
            current_statement_begin__ = 132;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 133;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 134;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 135;
            int is_heter(0);
            (void) is_heter;  // dummy to suppress unused var warning
            stan::math::fill(is_heter, std::numeric_limits<int>::min());
            stan::math::assign(is_heter,get_base1(opts, 4, "opts", 1));
            current_statement_begin__ = 136;
            int is_warped(0);
            (void) is_warped;  // dummy to suppress unused var warning
            stan::math::fill(is_warped, std::numeric_limits<int>::min());
            stan::math::assign(is_warped,get_base1(opts, 5, "opts", 1));
            current_statement_begin__ = 137;
            int is_var_masked(0);
            (void) is_var_masked;  // dummy to suppress unused var warning
            stan::math::fill(is_var_masked, std::numeric_limits<int>::min());
            stan::math::assign(is_var_masked,get_base1(opts, 6, "opts", 1));
            current_statement_begin__ = 138;
            int is_uncrt(0);
            (void) is_uncrt;  // dummy to suppress unused var warning
            stan::math::fill(is_uncrt, std::numeric_limits<int>::min());
            stan::math::assign(is_uncrt,get_base1(opts, 7, "opts", 1));
            current_statement_begin__ = 141;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 142;
                if (as_bool(is_warped)) {
                    current_statement_begin__ = 143;
                    stan::math::assign(X, get_base1(x_unnorm, idx_cont, "x_unnorm", 1));
                } else {
                    current_statement_begin__ = 145;
                    stan::math::assign(X, get_base1(x, idx_cont, "x", 1));
                }
            }
            current_statement_begin__ = 150;
            if (as_bool(is_warped)) {
                {
                current_statement_begin__ = 151;
                local_scalar_t__ s(DUMMY_VAR__);
                (void) s;  // dummy to suppress unused var warning
                stan::math::initialize(s, DUMMY_VAR__);
                stan::math::fill(s, DUMMY_VAR__);
                current_statement_begin__ = 152;
                stan::math::assign(idx_wrp, (idx_wrp + 1));
                current_statement_begin__ = 155;
                if (as_bool(is_uncrt)) {
                    current_statement_begin__ = 156;
                    stan::math::assign(X, STAN_edit_x_cont(X, idx_expand, get_base1(teff_zero, 1, "teff_zero", 1), get_base1(teff, 1, "teff", 1), pstream__));
                }
                current_statement_begin__ = 160;
                stan::math::assign(s, get_base1(wrp, idx_wrp, "wrp", 1));
                current_statement_begin__ = 161;
                if (as_bool(is_var_masked)) {
                    current_statement_begin__ = 162;
                    stan::math::assign(K_diag, elt_multiply(K_diag, STAN_kernel_varmask_diag(X, s, vm_params, pstream__)));
                }
                current_statement_begin__ = 166;
                stan::math::assign(X, STAN_warp_input(X, s, pstream__));
                }
            }
            current_statement_begin__ = 170;
            stan::math::assign(idx_alpha, (idx_alpha + 1));
            current_statement_begin__ = 171;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 172;
                stan::math::assign(K_diag, elt_multiply(K_diag, STAN_kernel_eq_diag(n, get_base1(alpha, idx_alpha, "alpha", 1), pstream__)));
            } else {
                current_statement_begin__ = 174;
                stan::math::assign(K_diag, multiply(square(get_base1(alpha, idx_alpha, "alpha", 1)), K_diag));
            }
            current_statement_begin__ = 178;
            if (as_bool(is_heter)) {
                current_statement_begin__ = 179;
                stan::math::assign(K_diag, elt_multiply(K_diag, STAN_kernel_beta_diag(get_base1(beta, 1, "beta", 1), idx_expand, pstream__)));
            }
            current_statement_begin__ = 182;
            stan::model::assign(KX_diag, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K_diag, 
                        "assigning variable KX_diag");
            }
        }
        current_statement_begin__ = 185;
        return stan::math::promote_scalar<fun_return_scalar_t__>(KX_diag);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_all_diag_functor__ {
    template <typename T1__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T11__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T11__>::type>::type>::type, Eigen::Dynamic, 1> >
    operator()(const int& n,
                         const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& K_const_diag,
                         const std::vector<std::vector<int> >& components,
                         const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic, 1> >& x,
                         const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x_unnorm,
                         const std::vector<T5__>& alpha,
                         const std::vector<T6__>& wrp,
                         const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& beta,
                         const std::vector<Eigen::Matrix<T8__, Eigen::Dynamic, 1> >& teff,
                         const std::vector<T9__>& vm_params,
                         const std::vector<int>& idx_expand,
                         const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__) const {
        return STAN_kernel_all_diag(n, K_const_diag, components, x, x_unnorm, alpha, wrp, beta, teff, vm_params, idx_expand, teff_zero, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_zerosum(const std::vector<int>& x1,
                        const std::vector<int>& x2,
                        const int& num_cat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 190;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 191;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 192;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 193;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 194;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 195;
                if (as_bool(logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)))) {
                    current_statement_begin__ = 196;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                1, 
                                "assigning variable K");
                } else {
                    current_statement_begin__ = 198;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                -(inv((num_cat - 1))), 
                                "assigning variable K");
                }
            }
        }
        current_statement_begin__ = 202;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_zerosum_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                        const std::vector<int>& x2,
                        const int& num_cat, std::ostream* pstream__) const {
        return STAN_kernel_zerosum(x1, x2, num_cat, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_cat(const std::vector<int>& x1,
                    const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 207;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 208;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 209;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 210;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 211;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 212;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            logical_eq(get_base1(x1, i, "x1", 1), get_base1(x2, j, "x2", 1)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 215;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_cat_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                    const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_cat(x1, x2, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_bin(const std::vector<int>& x1,
                    const std::vector<int>& x2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 220;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,size(x1));
        current_statement_begin__ = 221;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,size(x2));
        current_statement_begin__ = 222;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 223;
        for (int i = 1; i <= n1; ++i) {
            current_statement_begin__ = 224;
            for (int j = 1; j <= n2; ++j) {
                current_statement_begin__ = 225;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (logical_eq(get_base1(x1, i, "x1", 1), 0) * logical_eq(get_base1(x2, j, "x2", 1), 0)), 
                            "assigning variable K");
            }
        }
        current_statement_begin__ = 228;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_bin_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                    const std::vector<int>& x2, std::ostream* pstream__) const {
        return STAN_kernel_bin(x1, x2, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_const(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& ncat, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 236;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,num_elements(x1));
        current_statement_begin__ = 237;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,num_elements(x2));
        current_statement_begin__ = 238;
        validate_non_negative_index("K", "n1", n1);
        validate_non_negative_index("K", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K, DUMMY_VAR__);
        current_statement_begin__ = 239;
        if (as_bool(logical_eq(kernel_type, 1))) {
            current_statement_begin__ = 240;
            stan::math::assign(K, STAN_kernel_cat(x1, x2, pstream__));
        } else if (as_bool(logical_eq(kernel_type, 2))) {
            current_statement_begin__ = 242;
            stan::math::assign(K, STAN_kernel_bin(x1, x2, pstream__));
        } else {
            current_statement_begin__ = 245;
            stan::math::assign(K, STAN_kernel_zerosum(x1, x2, ncat, pstream__));
        }
        current_statement_begin__ = 247;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_const_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& ncat, std::ostream* pstream__) const {
        return STAN_kernel_const(x1, x2, kernel_type, ncat, pstream__);
    }
};
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_const_all(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 258;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 259;
        validate_non_negative_index("K_const", "n1", n1);
        validate_non_negative_index("K_const", "n2", n2);
        validate_non_negative_index("K_const", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > K_const(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(K_const, DUMMY_VAR__);
        stan::math::fill(K_const, DUMMY_VAR__);
        current_statement_begin__ = 260;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 261;
            validate_non_negative_index("K", "n1", n1);
            validate_non_negative_index("K", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            current_statement_begin__ = 262;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 263;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 264;
            int ktype(0);
            (void) ktype;  // dummy to suppress unused var warning
            stan::math::fill(ktype, std::numeric_limits<int>::min());
            stan::math::assign(ktype,get_base1(opts, 2, "opts", 1));
            current_statement_begin__ = 265;
            int idx_cat(0);
            (void) idx_cat;  // dummy to suppress unused var warning
            stan::math::fill(idx_cat, std::numeric_limits<int>::min());
            stan::math::assign(idx_cat,get_base1(opts, 8, "opts", 1));
            current_statement_begin__ = 266;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 269;
            if (as_bool(logical_neq(idx_cont, 0))) {
                current_statement_begin__ = 270;
                stan::math::assign(K, STAN_kernel_const(get_base1(x1_mask, idx_cont, "x1_mask", 1), get_base1(x2_mask, idx_cont, "x2_mask", 1), 2, 0, pstream__));
            } else {
                current_statement_begin__ = 272;
                stan::math::assign(K, rep_matrix(1, n1, n2));
            }
            current_statement_begin__ = 276;
            if (as_bool((primitive_value(logical_eq(ctype, 0)) || primitive_value(logical_eq(ctype, 2))))) {
                {
                current_statement_begin__ = 277;
                int M(0);
                (void) M;  // dummy to suppress unused var warning
                stan::math::fill(M, std::numeric_limits<int>::min());
                stan::math::assign(M,get_base1(num_levels, idx_cat, "num_levels", 1));
                current_statement_begin__ = 278;
                stan::math::assign(K, elt_multiply(K, STAN_kernel_const(get_base1(x1, idx_cat, "x1", 1), get_base1(x2, idx_cat, "x2", 1), ktype, M, pstream__)));
                }
            }
            current_statement_begin__ = 280;
            stan::model::assign(K_const, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K, 
                        "assigning variable K_const");
            }
        }
        current_statement_begin__ = 282;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_const);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_const_all_functor__ {
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__) const {
        return STAN_kernel_const_all(n1, n2, x1, x2, x1_mask, x2_mask, num_levels, components, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_eq(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                   const T2__& alpha,
                   const T3__& ell, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 287;
        return stan::math::promote_scalar<fun_return_scalar_t__>(cov_exp_quad(to_array_1d(x1), to_array_1d(x2), alpha, ell));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_eq_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                   const T2__& alpha,
                   const T3__& ell, std::ostream* pstream__) const {
        return STAN_kernel_eq(x1, x2, alpha, ell, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_varmask(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                        const T2__& steepness,
                        const std::vector<T3__>& vm_params, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 294;
        local_scalar_t__ a(DUMMY_VAR__);
        (void) a;  // dummy to suppress unused var warning
        stan::math::initialize(a, DUMMY_VAR__);
        stan::math::fill(a, DUMMY_VAR__);
        stan::math::assign(a,(steepness * get_base1(vm_params, 2, "vm_params", 1)));
        current_statement_begin__ = 295;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,(inv(a) * logit(get_base1(vm_params, 1, "vm_params", 1))));
        current_statement_begin__ = 296;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(to_matrix(to_matrix(STAN_var_mask(subtract(x1, r), a, pstream__))), transpose(to_matrix(STAN_var_mask(subtract(x2, r), a, pstream__)))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_varmask_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x1,
                        const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& x2,
                        const T2__& steepness,
                        const std::vector<T3__>& vm_params, std::ostream* pstream__) const {
        return STAN_kernel_varmask(x1, x2, steepness, vm_params, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_beta(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                     const std::vector<int>& idx1_expand,
                     const std::vector<int>& idx2_expand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 304;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(to_matrix(STAN_expand(stan::math::sqrt(beta), idx1_expand, pstream__)), transpose(to_matrix(STAN_expand(stan::math::sqrt(beta), idx2_expand, pstream__)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_beta_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                     const std::vector<int>& idx1_expand,
                     const std::vector<int>& idx2_expand, std::ostream* pstream__) const {
        return STAN_kernel_beta(beta, idx1_expand, idx2_expand, pstream__);
    }
};
template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T16__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<T8__>& alpha,
                    const std::vector<T9__>& ell,
                    const std::vector<T10__>& wrp,
                    const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<T13__>& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<T16__, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 333;
        int idx_ell(0);
        (void) idx_ell;  // dummy to suppress unused var warning
        stan::math::fill(idx_ell, std::numeric_limits<int>::min());
        stan::math::assign(idx_ell,0);
        current_statement_begin__ = 334;
        int idx_wrp(0);
        (void) idx_wrp;  // dummy to suppress unused var warning
        stan::math::fill(idx_wrp, std::numeric_limits<int>::min());
        stan::math::assign(idx_wrp,0);
        current_statement_begin__ = 335;
        int idx_alpha(0);
        (void) idx_alpha;  // dummy to suppress unused var warning
        stan::math::fill(idx_alpha, std::numeric_limits<int>::min());
        stan::math::assign(idx_alpha,0);
        current_statement_begin__ = 336;
        int num_comps(0);
        (void) num_comps;  // dummy to suppress unused var warning
        stan::math::fill(num_comps, std::numeric_limits<int>::min());
        stan::math::assign(num_comps,size(components));
        current_statement_begin__ = 337;
        validate_non_negative_index("KX", "n1", n1);
        validate_non_negative_index("KX", "n2", n2);
        validate_non_negative_index("KX", "num_comps", num_comps);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > KX(num_comps, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n1, n2));
        stan::math::initialize(KX, DUMMY_VAR__);
        stan::math::fill(KX, DUMMY_VAR__);
        current_statement_begin__ = 340;
        for (int j = 1; j <= num_comps; ++j) {
            {
            current_statement_begin__ = 343;
            validate_non_negative_index("K", "n1", n1);
            validate_non_negative_index("K", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(n1, n2);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            stan::math::assign(K,get_base1(K_const, j, "K_const", 1));
            current_statement_begin__ = 344;
            validate_non_negative_index("X1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X1(n1);
            stan::math::initialize(X1, DUMMY_VAR__);
            stan::math::fill(X1, DUMMY_VAR__);
            current_statement_begin__ = 345;
            validate_non_negative_index("X2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X2(n2);
            stan::math::initialize(X2, DUMMY_VAR__);
            stan::math::fill(X2, DUMMY_VAR__);
            current_statement_begin__ = 348;
            validate_non_negative_index("opts", "9", 9);
            std::vector<int  > opts(9, int(0));
            stan::math::fill(opts, std::numeric_limits<int>::min());
            stan::math::assign(opts,get_base1(components, j, "components", 1));
            current_statement_begin__ = 349;
            int ctype(0);
            (void) ctype;  // dummy to suppress unused var warning
            stan::math::fill(ctype, std::numeric_limits<int>::min());
            stan::math::assign(ctype,get_base1(opts, 1, "opts", 1));
            current_statement_begin__ = 350;
            int idx_cont(0);
            (void) idx_cont;  // dummy to suppress unused var warning
            stan::math::fill(idx_cont, std::numeric_limits<int>::min());
            stan::math::assign(idx_cont,get_base1(opts, 9, "opts", 1));
            current_statement_begin__ = 351;
            int is_heter(0);
            (void) is_heter;  // dummy to suppress unused var warning
            stan::math::fill(is_heter, std::numeric_limits<int>::min());
            stan::math::assign(is_heter,get_base1(opts, 4, "opts", 1));
            current_statement_begin__ = 352;
            int is_warped(0);
            (void) is_warped;  // dummy to suppress unused var warning
            stan::math::fill(is_warped, std::numeric_limits<int>::min());
            stan::math::assign(is_warped,get_base1(opts, 5, "opts", 1));
            current_statement_begin__ = 353;
            int is_var_masked(0);
            (void) is_var_masked;  // dummy to suppress unused var warning
            stan::math::fill(is_var_masked, std::numeric_limits<int>::min());
            stan::math::assign(is_var_masked,get_base1(opts, 6, "opts", 1));
            current_statement_begin__ = 354;
            int is_uncrt(0);
            (void) is_uncrt;  // dummy to suppress unused var warning
            stan::math::fill(is_uncrt, std::numeric_limits<int>::min());
            stan::math::assign(is_uncrt,get_base1(opts, 7, "opts", 1));
            current_statement_begin__ = 357;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 358;
                if (as_bool(is_warped)) {
                    current_statement_begin__ = 359;
                    stan::math::assign(X1, get_base1(x1_unnorm, idx_cont, "x1_unnorm", 1));
                    current_statement_begin__ = 360;
                    stan::math::assign(X2, get_base1(x2_unnorm, idx_cont, "x2_unnorm", 1));
                } else {
                    current_statement_begin__ = 362;
                    stan::math::assign(X1, get_base1(x1, idx_cont, "x1", 1));
                    current_statement_begin__ = 363;
                    stan::math::assign(X2, get_base1(x2, idx_cont, "x2", 1));
                }
            }
            current_statement_begin__ = 368;
            if (as_bool(is_warped)) {
                {
                current_statement_begin__ = 369;
                local_scalar_t__ s(DUMMY_VAR__);
                (void) s;  // dummy to suppress unused var warning
                stan::math::initialize(s, DUMMY_VAR__);
                stan::math::fill(s, DUMMY_VAR__);
                current_statement_begin__ = 370;
                stan::math::assign(idx_wrp, (idx_wrp + 1));
                current_statement_begin__ = 373;
                if (as_bool(is_uncrt)) {
                    current_statement_begin__ = 374;
                    stan::math::assign(X1, STAN_edit_x_cont(X1, idx1_expand, get_base1(teff_zero, 1, "teff_zero", 1), get_base1(teff, 1, "teff", 1), pstream__));
                    current_statement_begin__ = 375;
                    stan::math::assign(X2, STAN_edit_x_cont(X2, idx2_expand, get_base1(teff_zero, 1, "teff_zero", 1), get_base1(teff, 1, "teff", 1), pstream__));
                }
                current_statement_begin__ = 379;
                stan::math::assign(s, get_base1(wrp, idx_wrp, "wrp", 1));
                current_statement_begin__ = 380;
                if (as_bool(is_var_masked)) {
                    current_statement_begin__ = 381;
                    stan::math::assign(K, elt_multiply(K, STAN_kernel_varmask(X1, X2, s, vm_params, pstream__)));
                }
                current_statement_begin__ = 385;
                stan::math::assign(X1, STAN_warp_input(X1, s, pstream__));
                current_statement_begin__ = 386;
                stan::math::assign(X2, STAN_warp_input(X2, s, pstream__));
                }
            }
            current_statement_begin__ = 390;
            stan::math::assign(idx_alpha, (idx_alpha + 1));
            current_statement_begin__ = 391;
            if (as_bool(logical_neq(ctype, 0))) {
                current_statement_begin__ = 392;
                stan::math::assign(idx_ell, (idx_ell + 1));
                current_statement_begin__ = 393;
                stan::math::assign(K, elt_multiply(K, STAN_kernel_eq(X1, X2, get_base1(alpha, idx_alpha, "alpha", 1), get_base1(ell, idx_ell, "ell", 1), pstream__)));
            } else {
                current_statement_begin__ = 395;
                stan::math::assign(K, multiply(square(get_base1(alpha, idx_alpha, "alpha", 1)), K));
            }
            current_statement_begin__ = 399;
            if (as_bool(is_heter)) {
                current_statement_begin__ = 400;
                stan::math::assign(K, elt_multiply(K, STAN_kernel_beta(get_base1(beta, 1, "beta", 1), idx1_expand, idx2_expand, pstream__)));
            }
            current_statement_begin__ = 403;
            stan::model::assign(KX, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        K, 
                        "assigning variable KX");
            }
        }
        current_statement_begin__ = 406;
        return stan::math::promote_scalar<fun_return_scalar_t__>(KX);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_kernel_all_functor__ {
    template <typename T2__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T16__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T4__, T5__, T6__, typename boost::math::tools::promote_args<T7__, T8__, T9__, T10__, typename boost::math::tools::promote_args<T11__, T12__, T13__, T16__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<T8__>& alpha,
                    const std::vector<T9__>& ell,
                    const std::vector<T10__>& wrp,
                    const std::vector<Eigen::Matrix<T11__, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<T12__, Eigen::Dynamic, 1> >& teff,
                    const std::vector<T13__>& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<T16__, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__) const {
        return STAN_kernel_all(n1, n2, K_const, components, x1, x2, x1_unnorm, x2_unnorm, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_zero, pstream__);
    }
};
template <typename T0__, typename T2__>
typename boost::math::tools::promote_args<T0__, T2__>::type
STAN_log_prior(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 411;
        local_scalar_t__ log_prior(DUMMY_VAR__);
        (void) log_prior;  // dummy to suppress unused var warning
        stan::math::initialize(log_prior, DUMMY_VAR__);
        stan::math::fill(log_prior, DUMMY_VAR__);
        stan::math::assign(log_prior,0);
        current_statement_begin__ = 412;
        local_scalar_t__ t(DUMMY_VAR__);
        (void) t;  // dummy to suppress unused var warning
        stan::math::initialize(t, DUMMY_VAR__);
        stan::math::fill(t, DUMMY_VAR__);
        stan::math::assign(t,x);
        current_statement_begin__ = 415;
        if (as_bool(logical_eq(get_base1(types, 2, "types", 1), 1))) {
            current_statement_begin__ = 416;
            stan::math::assign(log_prior, (log_prior + stan::math::log(stan::math::fabs((2 * x)))));
            current_statement_begin__ = 417;
            stan::math::assign(t, square(x));
        }
        current_statement_begin__ = 421;
        if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 2))) {
            current_statement_begin__ = 422;
            stan::math::assign(log_prior, (log_prior + normal_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 3))) {
            current_statement_begin__ = 424;
            stan::math::assign(log_prior, (log_prior + student_t_log(t, get_base1(p, 1, "p", 1), 0.0, 1.0)));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 4))) {
            current_statement_begin__ = 426;
            stan::math::assign(log_prior, (log_prior + gamma_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 5))) {
            current_statement_begin__ = 428;
            stan::math::assign(log_prior, (log_prior + inv_gamma_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        } else if (as_bool(logical_eq(get_base1(types, 1, "types", 1), 6))) {
            current_statement_begin__ = 430;
            stan::math::assign(log_prior, (log_prior + lognormal_log(t, get_base1(p, 1, "p", 1), get_base1(p, 2, "p", 1))));
        }
        current_statement_begin__ = 433;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_prior);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_log_prior_functor__ {
    template <typename T0__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T2__>::type
    operator()(const T0__& x,
                   const std::vector<int>& types,
                   const std::vector<T2__>& p, std::ostream* pstream__) const {
        return STAN_log_prior(x, types, p, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
STAN_vectorsum(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& vecs,
                   const int& L, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 438;
        int num_vecs(0);
        (void) num_vecs;  // dummy to suppress unused var warning
        stan::math::fill(num_vecs, std::numeric_limits<int>::min());
        stan::math::assign(num_vecs,size(vecs));
        current_statement_begin__ = 439;
        validate_non_negative_index("s", "L", L);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(L);
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        stan::math::assign(s,rep_vector(0, L));
        current_statement_begin__ = 440;
        for (int j = 1; j <= num_vecs; ++j) {
            current_statement_begin__ = 441;
            stan::math::assign(s, add(s, get_base1(vecs, j, "vecs", 1)));
        }
        current_statement_begin__ = 443;
        return stan::math::promote_scalar<fun_return_scalar_t__>(s);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_vectorsum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& vecs,
                   const int& L, std::ostream* pstream__) const {
        return STAN_vectorsum(vecs, L, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
STAN_matrix_array_sum(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 448;
        int n1(0);
        (void) n1;  // dummy to suppress unused var warning
        stan::math::fill(n1, std::numeric_limits<int>::min());
        stan::math::assign(n1,rows(get_base1(K, 1, "K", 1)));
        current_statement_begin__ = 449;
        int n2(0);
        (void) n2;  // dummy to suppress unused var warning
        stan::math::fill(n2, std::numeric_limits<int>::min());
        stan::math::assign(n2,cols(get_base1(K, 1, "K", 1)));
        current_statement_begin__ = 450;
        validate_non_negative_index("K_sum", "n1", n1);
        validate_non_negative_index("K_sum", "n2", n2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_sum(n1, n2);
        stan::math::initialize(K_sum, DUMMY_VAR__);
        stan::math::fill(K_sum, DUMMY_VAR__);
        stan::math::assign(K_sum,get_base1(K, 1, "K", 1));
        current_statement_begin__ = 451;
        for (int j = 2; j <= size(K); ++j) {
            current_statement_begin__ = 452;
            stan::math::assign(K_sum, add(K_sum, get_base1(K, j, "K", 1)));
        }
        current_statement_begin__ = 454;
        return stan::math::promote_scalar<fun_return_scalar_t__>(K_sum);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct STAN_matrix_array_sum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__) const {
        return STAN_matrix_array_sum(K, pstream__);
    }
};
 } 
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_var_mask(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                  const double& a, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_var_mask<double, double>(x, a, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_expand(const Eigen::Matrix<double, Eigen::Dynamic, 1>& v,
                const std::vector<int>& idx_expand, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_expand<double>(v, idx_expand, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_warp_input(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                    const double& a, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_warp_input<double, double>(x, a, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_edit_x_cont(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x_cont,
                     const std::vector<int>& idx_expand,
                     const Eigen::Matrix<double, Eigen::Dynamic, 1>& teff_obs,
                     const Eigen::Matrix<double, Eigen::Dynamic, 1>& teff, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_edit_x_cont<double, double, double>(x_cont, idx_expand, teff_obs, teff, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_kernel_const_diag(const std::vector<int>& x,
                           const int& kernel_type, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_const_diag(x, kernel_type, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
STAN_kernel_const_all_diag(const int& n,
                               const std::vector<std::vector<int> >& x,
                               const std::vector<std::vector<int> >& x_mask,
                               const std::vector<std::vector<int> >& components, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_const_all_diag(n, x, x_mask, components, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_kernel_eq_diag(const int& n,
                        const double& alpha, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_eq_diag<double>(n, alpha, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_kernel_varmask_diag(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
                             const double& steepness,
                             const std::vector<double>& vm_params, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_varmask_diag<double, double, double>(x, steepness, vm_params, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_kernel_beta_diag(const Eigen::Matrix<double, Eigen::Dynamic, 1>& beta,
                          const std::vector<int>& idx_expand, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_beta_diag<double>(beta, idx_expand, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
STAN_kernel_all_diag(const int& n,
                         const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& K_const_diag,
                         const std::vector<std::vector<int> >& components,
                         const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x,
                         const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x_unnorm,
                         const std::vector<double>& alpha,
                         const std::vector<double>& wrp,
                         const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& beta,
                         const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff,
                         const std::vector<double>& vm_params,
                         const std::vector<int>& idx_expand,
                         const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_all_diag<double, double, double, double, double, double, double, double, double>(n, K_const_diag, components, x, x_unnorm, alpha, wrp, beta, teff, vm_params, idx_expand, teff_zero, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_zerosum(const std::vector<int>& x1,
                        const std::vector<int>& x2,
                        const int& num_cat, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_zerosum(x1, x2, num_cat, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_cat(const std::vector<int>& x1,
                    const std::vector<int>& x2, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_cat(x1, x2, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_bin(const std::vector<int>& x1,
                    const std::vector<int>& x2, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_bin(x1, x2, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_const(const std::vector<int>& x1,
                      const std::vector<int>& x2,
                      const int& kernel_type,
                      const int& ncat, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_const(x1, x2, kernel_type, ncat, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_const_all(const int& n1,
                          const int& n2,
                          const std::vector<std::vector<int> >& x1,
                          const std::vector<std::vector<int> >& x2,
                          const std::vector<std::vector<int> >& x1_mask,
                          const std::vector<std::vector<int> >& x2_mask,
                          const std::vector<int>& num_levels,
                          const std::vector<std::vector<int> >& components, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_const_all(n1, n2, x1, x2, x1_mask, x2_mask, num_levels, components, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_eq(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x1,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& x2,
                   const double& alpha,
                   const double& ell, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_eq<double, double, double, double>(x1, x2, alpha, ell, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_varmask(const Eigen::Matrix<double, Eigen::Dynamic, 1>& x1,
                        const Eigen::Matrix<double, Eigen::Dynamic, 1>& x2,
                        const double& steepness,
                        const std::vector<double>& vm_params, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_varmask<double, double, double, double>(x1, x2, steepness, vm_params, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_kernel_beta(const Eigen::Matrix<double, Eigen::Dynamic, 1>& beta,
                     const std::vector<int>& idx1_expand,
                     const std::vector<int>& idx2_expand, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_beta<double>(beta, idx1_expand, idx2_expand, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
STAN_kernel_all(const int& n1,
                    const int& n2,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K_const,
                    const std::vector<std::vector<int> >& components,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x1,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x2,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x1_unnorm,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& x2_unnorm,
                    const std::vector<double>& alpha,
                    const std::vector<double>& ell,
                    const std::vector<double>& wrp,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& beta,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff,
                    const std::vector<double>& vm_params,
                    const std::vector<int>& idx1_expand,
                    const std::vector<int>& idx2_expand,
                    const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& teff_zero, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_kernel_all<double, double, double, double, double, double, double, double, double, double, double, double>(n1, n2, K_const, components, x1, x2, x1_unnorm, x2_unnorm, alpha, ell, wrp, beta, teff, vm_params, idx1_expand, idx2_expand, teff_zero, pstream__);
}
// [[Rcpp::export]]
double
STAN_log_prior(const double& x,
                   const std::vector<int>& types,
                   const std::vector<double>& p, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_log_prior<double, double>(x, types, p, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
STAN_vectorsum(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& vecs,
                   const int& L, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_vectorsum<double>(vecs, L, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
STAN_matrix_array_sum(const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& K, std::ostream* pstream__ = 0){
  return 
user_165a074e42c73f2e80c4c1fff6a8ebfc::STAN_matrix_array_sum<double>(K, pstream__);
}
