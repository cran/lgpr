// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_parameter_prior_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'parameter_prior', line 131, column 2 to column 43)",
                                                      " (in 'parameter_prior', line 132, column 2 to column 39)",
                                                      " (in 'parameter_prior', line 133, column 2 to column 38)",
                                                      " (in 'parameter_prior', line 134, column 2 to column 69)",
                                                      " (in 'parameter_prior', line 135, column 2 to column 73)",
                                                      " (in 'parameter_prior', line 136, column 2 to column 46)",
                                                      " (in 'parameter_prior', line 137, column 2 to column 44)",
                                                      " (in 'parameter_prior', line 138, column 2 to column 61)",
                                                      " (in 'parameter_prior', line 143, column 2 to column 41)",
                                                      " (in 'parameter_prior', line 145, column 4 to column 68)",
                                                      " (in 'parameter_prior', line 144, column 23 to line 146, column 3)",
                                                      " (in 'parameter_prior', line 144, column 2 to line 146, column 3)",
                                                      " (in 'parameter_prior', line 153, column 4 to column 71)",
                                                      " (in 'parameter_prior', line 152, column 23 to line 154, column 3)",
                                                      " (in 'parameter_prior', line 152, column 2 to line 154, column 3)",
                                                      " (in 'parameter_prior', line 158, column 4 to column 65)",
                                                      " (in 'parameter_prior', line 157, column 21 to line 159, column 3)",
                                                      " (in 'parameter_prior', line 157, column 2 to line 159, column 3)",
                                                      " (in 'parameter_prior', line 163, column 4 to column 65)",
                                                      " (in 'parameter_prior', line 162, column 20 to line 164, column 3)",
                                                      " (in 'parameter_prior', line 162, column 2 to line 164, column 3)",
                                                      " (in 'parameter_prior', line 168, column 4 to column 70)",
                                                      " (in 'parameter_prior', line 167, column 23 to line 169, column 3)",
                                                      " (in 'parameter_prior', line 167, column 2 to line 169, column 3)",
                                                      " (in 'parameter_prior', line 173, column 4 to column 33)",
                                                      " (in 'parameter_prior', line 174, column 4 to column 40)",
                                                      " (in 'parameter_prior', line 175, column 4 to column 43)",
                                                      " (in 'parameter_prior', line 176, column 11 to column 17)",
                                                      " (in 'parameter_prior', line 176, column 4 to column 61)",
                                                      " (in 'parameter_prior', line 178, column 6 to column 65)",
                                                      " (in 'parameter_prior', line 177, column 22 to line 179, column 5)",
                                                      " (in 'parameter_prior', line 177, column 4 to line 179, column 5)",
                                                      " (in 'parameter_prior', line 172, column 23 to line 180, column 3)",
                                                      " (in 'parameter_prior', line 172, column 2 to line 180, column 3)",
                                                      " (in 'parameter_prior', line 186, column 4 to column 73)",
                                                      " (in 'parameter_prior', line 185, column 24 to line 187, column 3)",
                                                      " (in 'parameter_prior', line 185, column 8 to line 187, column 3)",
                                                      " (in 'parameter_prior', line 184, column 4 to column 65)",
                                                      " (in 'parameter_prior', line 183, column 24 to line 185, column 3)",
                                                      " (in 'parameter_prior', line 183, column 8 to line 187, column 3)",
                                                      " (in 'parameter_prior', line 182, column 4 to column 71)",
                                                      " (in 'parameter_prior', line 181, column 18 to line 183, column 3)",
                                                      " (in 'parameter_prior', line 181, column 2 to line 187, column 3)",
                                                      " (in 'parameter_prior', line 49, column 2 to column 35)",
                                                      " (in 'parameter_prior', line 50, column 2 to column 46)",
                                                      " (in 'parameter_prior', line 53, column 2 to column 23)",
                                                      " (in 'parameter_prior', line 54, column 2 to column 28)",
                                                      " (in 'parameter_prior', line 55, column 2 to column 27)",
                                                      " (in 'parameter_prior', line 56, column 2 to column 25)",
                                                      " (in 'parameter_prior', line 57, column 2 to column 23)",
                                                      " (in 'parameter_prior', line 58, column 2 to column 22)",
                                                      " (in 'parameter_prior', line 59, column 2 to column 25)",
                                                      " (in 'parameter_prior', line 60, column 2 to column 25)",
                                                      " (in 'parameter_prior', line 61, column 2 to column 22)",
                                                      " (in 'parameter_prior', line 88, column 8 to column 17)",
                                                      " (in 'parameter_prior', line 88, column 2 to column 46)",
                                                      " (in 'parameter_prior', line 91, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 91, column 28 to column 34)",
                                                      " (in 'parameter_prior', line 91, column 2 to column 46)",
                                                      " (in 'parameter_prior', line 92, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 92, column 28 to column 34)",
                                                      " (in 'parameter_prior', line 92, column 2 to column 44)",
                                                      " (in 'parameter_prior', line 93, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 93, column 28 to column 34)",
                                                      " (in 'parameter_prior', line 93, column 2 to column 44)",
                                                      " (in 'parameter_prior', line 96, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 96, column 2 to column 51)",
                                                      " (in 'parameter_prior', line 97, column 2 to column 13)",
                                                      " (in 'parameter_prior', line 98, column 2 to column 26)",
                                                      " (in 'parameter_prior', line 101, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 101, column 29 to column 36)",
                                                      " (in 'parameter_prior', line 101, column 2 to column 45)",
                                                      " (in 'parameter_prior', line 102, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 102, column 29 to column 36)",
                                                      " (in 'parameter_prior', line 102, column 2 to column 52)",
                                                      " (in 'parameter_prior', line 103, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 103, column 22 to column 29)",
                                                      " (in 'parameter_prior', line 103, column 2 to column 47)",
                                                      " (in 'parameter_prior', line 104, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 104, column 21 to column 28)",
                                                      " (in 'parameter_prior', line 104, column 2 to column 40)",
                                                      " (in 'parameter_prior', line 110, column 8 to column 15)",
                                                      " (in 'parameter_prior', line 110, column 2 to column 57)",
                                                      " (in 'parameter_prior', line 113, column 8 to column 17)",
                                                      " (in 'parameter_prior', line 113, column 2 to column 47)",
                                                      " (in 'parameter_prior', line 114, column 8 to column 15)",
                                                      " (in 'parameter_prior', line 114, column 2 to column 43)",
                                                      " (in 'parameter_prior', line 115, column 8 to column 14)",
                                                      " (in 'parameter_prior', line 115, column 2 to column 42)",
                                                      " (in 'parameter_prior', line 116, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 116, column 2 to column 48)",
                                                      " (in 'parameter_prior', line 117, column 8 to column 17)",
                                                      " (in 'parameter_prior', line 117, column 2 to column 39)",
                                                      " (in 'parameter_prior', line 118, column 8 to column 15)",
                                                      " (in 'parameter_prior', line 118, column 2 to column 35)",
                                                      " (in 'parameter_prior', line 119, column 8 to column 14)",
                                                      " (in 'parameter_prior', line 119, column 2 to column 34)",
                                                      " (in 'parameter_prior', line 120, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 120, column 2 to column 40)",
                                                      " (in 'parameter_prior', line 121, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 121, column 2 to column 40)",
                                                      " (in 'parameter_prior', line 122, column 2 to column 33)",
                                                      " (in 'parameter_prior', line 123, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 123, column 2 to column 50)",
                                                      " (in 'parameter_prior', line 124, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 124, column 2 to column 48)",
                                                      " (in 'parameter_prior', line 125, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 125, column 2 to column 42)",
                                                      " (in 'parameter_prior', line 126, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 126, column 2 to column 40)",
                                                      " (in 'parameter_prior', line 127, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 127, column 2 to column 42)",
                                                      " (in 'parameter_prior', line 131, column 8 to column 17)",
                                                      " (in 'parameter_prior', line 132, column 8 to column 15)",
                                                      " (in 'parameter_prior', line 133, column 8 to column 14)",
                                                      " (in 'parameter_prior', line 134, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 134, column 56 to column 62)",
                                                      " (in 'parameter_prior', line 135, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 135, column 56 to column 62)",
                                                      " (in 'parameter_prior', line 136, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 137, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 138, column 8 to column 20)",
                                                      " (in 'parameter_prior', line 143, column 8 to column 19)",
                                                      " (in 'parameter_prior', line 143, column 28 to column 34)",
                                                      " (in 'parameter_prior', line 21, column 4 to column 23)",
                                                      " (in 'parameter_prior', line 22, column 4 to column 15)",
                                                      " (in 'parameter_prior', line 26, column 6 to column 33)",
                                                      " (in 'parameter_prior', line 27, column 6 to column 20)",
                                                      " (in 'parameter_prior', line 25, column 20 to line 28, column 5)",
                                                      " (in 'parameter_prior', line 25, column 4 to line 28, column 5)",
                                                      " (in 'parameter_prior', line 40, column 6 to column 50)",
                                                      " (in 'parameter_prior', line 39, column 26 to line 41, column 5)",
                                                      " (in 'parameter_prior', line 39, column 10 to line 41, column 5)",
                                                      " (in 'parameter_prior', line 38, column 6 to column 50)",
                                                      " (in 'parameter_prior', line 37, column 26 to line 39, column 5)",
                                                      " (in 'parameter_prior', line 37, column 10 to line 41, column 5)",
                                                      " (in 'parameter_prior', line 36, column 6 to column 46)",
                                                      " (in 'parameter_prior', line 35, column 26 to line 37, column 5)",
                                                      " (in 'parameter_prior', line 35, column 10 to line 41, column 5)",
                                                      " (in 'parameter_prior', line 34, column 6 to column 54)",
                                                      " (in 'parameter_prior', line 33, column 26 to line 35, column 5)",
                                                      " (in 'parameter_prior', line 33, column 10 to line 41, column 5)",
                                                      " (in 'parameter_prior', line 32, column 6 to column 47)",
                                                      " (in 'parameter_prior', line 31, column 20 to line 33, column 5)",
                                                      " (in 'parameter_prior', line 31, column 4 to line 41, column 5)",
                                                      " (in 'parameter_prior', line 43, column 4 to column 22)",
                                                      " (in 'parameter_prior', line 20, column 75 to line 44, column 3)"};
template <typename T0__>
stan::promote_args_t<T0__>
STAN_log_prior(const T0__& x, const std::vector<int>& types,
               const std::vector<double>& p, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ log_prior;
    log_prior = DUMMY_VAR__;
    
    current_statement__ = 125;
    log_prior = 0;
    local_scalar_t__ t;
    t = DUMMY_VAR__;
    
    current_statement__ = 126;
    t = x;
    current_statement__ = 130;
    if (logical_eq(types[(2 - 1)], 1)) {
      current_statement__ = 127;
      log_prior = (log_prior + stan::math::log(stan::math::abs((2 * x))));
      current_statement__ = 128;
      t = square(x);
    } 
    current_statement__ = 145;
    if (logical_eq(types[(1 - 1)], 2)) {
      current_statement__ = 143;
      log_prior = (log_prior + normal_lpdf<false>(t, p[(1 - 1)], p[(2 - 1)]));
    } else {
      current_statement__ = 142;
      if (logical_eq(types[(1 - 1)], 3)) {
        current_statement__ = 140;
        log_prior = (log_prior +
                      student_t_lpdf<false>(t, p[(1 - 1)], 0.0, 1.0));
      } else {
        current_statement__ = 139;
        if (logical_eq(types[(1 - 1)], 4)) {
          current_statement__ = 137;
          log_prior = (log_prior +
                        gamma_lpdf<false>(t, p[(1 - 1)], p[(2 - 1)]));
        } else {
          current_statement__ = 136;
          if (logical_eq(types[(1 - 1)], 5)) {
            current_statement__ = 134;
            log_prior = (log_prior +
                          inv_gamma_lpdf<false>(t, p[(1 - 1)], p[(2 - 1)]));
          } else {
            current_statement__ = 133;
            if (logical_eq(types[(1 - 1)], 6)) {
              current_statement__ = 131;
              log_prior = (log_prior +
                            lognormal_lpdf<false>(t, p[(1 - 1)], p[(2 - 1)]));
            } 
          }
        }
      }
    }
    current_statement__ = 146;
    return log_prior;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct STAN_log_prior_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, const std::vector<int>& types,
           const std::vector<double>& p, std::ostream* pstream__)  const 
{
return STAN_log_prior(x, types, p, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_parameter_prior final : public model_base_crtp<model_parameter_prior> {
private:
  int is_verbose;
  int is_likelihood_skipped;
  int num_obs;
  int num_cov_cont;
  int num_cov_cat;
  int num_comps;
  int num_ell;
  int num_ns;
  int num_heter;
  int num_uncrt;
  int num_bt;
  std::vector<std::vector<int>> components;
  std::vector<Eigen::Matrix<double, -1, 1>> teff_zero;
  std::vector<Eigen::Matrix<double, -1, 1>> teff_lb;
  std::vector<Eigen::Matrix<double, -1, 1>> teff_ub;
  std::vector<int> x_cat_num_levels;
  double delta;
  std::vector<double> vm_params;
  std::vector<Eigen::Matrix<double, -1, 1>> x_cont;
  std::vector<Eigen::Matrix<double, -1, 1>> x_cont_unnorm;
  std::vector<std::vector<int>> x_cont_mask;
  std::vector<std::vector<int>> x_cat;
  std::vector<int> idx_expand;
  std::vector<std::vector<int>> prior_alpha;
  std::vector<std::vector<int>> prior_ell;
  std::vector<std::vector<int>> prior_wrp;
  std::vector<std::vector<int>> prior_teff;
  std::vector<std::vector<double>> hyper_alpha;
  std::vector<std::vector<double>> hyper_ell;
  std::vector<std::vector<double>> hyper_wrp;
  std::vector<std::vector<double>> hyper_teff;
  std::vector<std::vector<double>> hyper_beta;
  int obs_model;
  std::vector<std::vector<int>> prior_sigma;
  std::vector<std::vector<int>> prior_phi;
  std::vector<std::vector<double>> hyper_sigma;
  std::vector<std::vector<double>> hyper_phi;
  std::vector<std::vector<double>> hyper_gamma;
  int beta_1dim__;
  int teff_raw_1dim__;
  int sigma_1dim__;
  int phi_1dim__;
  int gamma_1dim__;
  int teff_1dim__;
 
public:
  ~model_parameter_prior() { }
  
  inline std::string model_name() const final { return "model_parameter_prior"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_parameter_prior(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_parameter_prior_namespace::model_parameter_prior";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 44;
      context__.validate_dims("data initialization","is_verbose","int",
          context__.to_vec());
      is_verbose = std::numeric_limits<int>::min();
      
      current_statement__ = 44;
      is_verbose = context__.vals_i("is_verbose")[(1 - 1)];
      current_statement__ = 44;
      current_statement__ = 44;
      check_greater_or_equal(function__, "is_verbose", is_verbose, 0);
      current_statement__ = 44;
      current_statement__ = 44;
      check_less_or_equal(function__, "is_verbose", is_verbose, 1);
      current_statement__ = 45;
      context__.validate_dims("data initialization","is_likelihood_skipped",
          "int",context__.to_vec());
      is_likelihood_skipped = std::numeric_limits<int>::min();
      
      current_statement__ = 45;
      is_likelihood_skipped = context__.vals_i("is_likelihood_skipped")[
          (1 - 1)];
      current_statement__ = 45;
      current_statement__ = 45;
      check_greater_or_equal(function__, "is_likelihood_skipped",
                             is_likelihood_skipped, 0);
      current_statement__ = 45;
      current_statement__ = 45;
      check_less_or_equal(function__, "is_likelihood_skipped",
                          is_likelihood_skipped, 1);
      current_statement__ = 46;
      context__.validate_dims("data initialization","num_obs","int",
          context__.to_vec());
      num_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 46;
      num_obs = context__.vals_i("num_obs")[(1 - 1)];
      current_statement__ = 46;
      current_statement__ = 46;
      check_greater_or_equal(function__, "num_obs", num_obs, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization","num_cov_cont","int",
          context__.to_vec());
      num_cov_cont = std::numeric_limits<int>::min();
      
      current_statement__ = 47;
      num_cov_cont = context__.vals_i("num_cov_cont")[(1 - 1)];
      current_statement__ = 47;
      current_statement__ = 47;
      check_greater_or_equal(function__, "num_cov_cont", num_cov_cont, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization","num_cov_cat","int",
          context__.to_vec());
      num_cov_cat = std::numeric_limits<int>::min();
      
      current_statement__ = 48;
      num_cov_cat = context__.vals_i("num_cov_cat")[(1 - 1)];
      current_statement__ = 48;
      current_statement__ = 48;
      check_greater_or_equal(function__, "num_cov_cat", num_cov_cat, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization","num_comps","int",
          context__.to_vec());
      num_comps = std::numeric_limits<int>::min();
      
      current_statement__ = 49;
      num_comps = context__.vals_i("num_comps")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "num_comps", num_comps, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization","num_ell","int",
          context__.to_vec());
      num_ell = std::numeric_limits<int>::min();
      
      current_statement__ = 50;
      num_ell = context__.vals_i("num_ell")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "num_ell", num_ell, 0);
      current_statement__ = 51;
      context__.validate_dims("data initialization","num_ns","int",
          context__.to_vec());
      num_ns = std::numeric_limits<int>::min();
      
      current_statement__ = 51;
      num_ns = context__.vals_i("num_ns")[(1 - 1)];
      current_statement__ = 51;
      current_statement__ = 51;
      check_greater_or_equal(function__, "num_ns", num_ns, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization","num_heter","int",
          context__.to_vec());
      num_heter = std::numeric_limits<int>::min();
      
      current_statement__ = 52;
      num_heter = context__.vals_i("num_heter")[(1 - 1)];
      current_statement__ = 52;
      current_statement__ = 52;
      check_greater_or_equal(function__, "num_heter", num_heter, 0);
      current_statement__ = 53;
      context__.validate_dims("data initialization","num_uncrt","int",
          context__.to_vec());
      num_uncrt = std::numeric_limits<int>::min();
      
      current_statement__ = 53;
      num_uncrt = context__.vals_i("num_uncrt")[(1 - 1)];
      current_statement__ = 53;
      current_statement__ = 53;
      check_greater_or_equal(function__, "num_uncrt", num_uncrt, 0);
      current_statement__ = 54;
      context__.validate_dims("data initialization","num_bt","int",
          context__.to_vec());
      num_bt = std::numeric_limits<int>::min();
      
      current_statement__ = 54;
      num_bt = context__.vals_i("num_bt")[(1 - 1)];
      current_statement__ = 54;
      current_statement__ = 54;
      check_greater_or_equal(function__, "num_bt", num_bt, 0);
      current_statement__ = 55;
      validate_non_negative_index("components", "num_comps", num_comps);
      current_statement__ = 56;
      context__.validate_dims("data initialization","components","int",
          context__.to_vec(num_comps, 9));
      components = std::vector<std::vector<int>>(num_comps, std::vector<int>(9, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> components_flat__;
        current_statement__ = 56;
        assign(components_flat__, nil_index_list(),
          context__.vals_i("components"),
          "assigning variable components_flat__");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= 9; ++sym1__) {
          current_statement__ = 56;
          for (int sym2__ = 1; sym2__ <= num_comps; ++sym2__) {
            current_statement__ = 56;
            assign(components,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              components_flat__[(pos__ - 1)], "assigning variable components");
            current_statement__ = 56;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 56;
      for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
        current_statement__ = 56;
        for (int sym2__ = 1; sym2__ <= 9; ++sym2__) {
          current_statement__ = 56;
          current_statement__ = 56;
          check_greater_or_equal(function__, "components[sym1__, sym2__]",
                                 components[(sym1__ - 1)][(sym2__ - 1)], 0);}
      }
      current_statement__ = 57;
      validate_non_negative_index("teff_zero", "num_uncrt > 0",
                                  logical_gt(num_uncrt, 0));
      current_statement__ = 58;
      validate_non_negative_index("teff_zero", "num_bt", num_bt);
      current_statement__ = 59;
      context__.validate_dims("data initialization","teff_zero","double",
          context__.to_vec(logical_gt(num_uncrt, 0), num_bt));
      teff_zero = std::vector<Eigen::Matrix<double, -1, 1>>(logical_gt(
                                                              num_uncrt, 0), Eigen::Matrix<double, -1, 1>(num_bt));
      stan::math::fill(teff_zero, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> teff_zero_flat__;
        current_statement__ = 59;
        assign(teff_zero_flat__, nil_index_list(),
          context__.vals_r("teff_zero"),
          "assigning variable teff_zero_flat__");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
          current_statement__ = 59;
          for (int sym2__ = 1; sym2__ <= logical_gt(num_uncrt, 0); ++sym2__) {
            current_statement__ = 59;
            assign(teff_zero,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              teff_zero_flat__[(pos__ - 1)], "assigning variable teff_zero");
            current_statement__ = 59;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 60;
      validate_non_negative_index("teff_lb", "num_uncrt > 0",
                                  logical_gt(num_uncrt, 0));
      current_statement__ = 61;
      validate_non_negative_index("teff_lb", "num_bt", num_bt);
      current_statement__ = 62;
      context__.validate_dims("data initialization","teff_lb","double",
          context__.to_vec(logical_gt(num_uncrt, 0), num_bt));
      teff_lb = std::vector<Eigen::Matrix<double, -1, 1>>(logical_gt(
                                                            num_uncrt, 0), Eigen::Matrix<double, -1, 1>(num_bt));
      stan::math::fill(teff_lb, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> teff_lb_flat__;
        current_statement__ = 62;
        assign(teff_lb_flat__, nil_index_list(), context__.vals_r("teff_lb"),
          "assigning variable teff_lb_flat__");
        current_statement__ = 62;
        pos__ = 1;
        current_statement__ = 62;
        for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
          current_statement__ = 62;
          for (int sym2__ = 1; sym2__ <= logical_gt(num_uncrt, 0); ++sym2__) {
            current_statement__ = 62;
            assign(teff_lb,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              teff_lb_flat__[(pos__ - 1)], "assigning variable teff_lb");
            current_statement__ = 62;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 63;
      validate_non_negative_index("teff_ub", "num_uncrt > 0",
                                  logical_gt(num_uncrt, 0));
      current_statement__ = 64;
      validate_non_negative_index("teff_ub", "num_bt", num_bt);
      current_statement__ = 65;
      context__.validate_dims("data initialization","teff_ub","double",
          context__.to_vec(logical_gt(num_uncrt, 0), num_bt));
      teff_ub = std::vector<Eigen::Matrix<double, -1, 1>>(logical_gt(
                                                            num_uncrt, 0), Eigen::Matrix<double, -1, 1>(num_bt));
      stan::math::fill(teff_ub, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> teff_ub_flat__;
        current_statement__ = 65;
        assign(teff_ub_flat__, nil_index_list(), context__.vals_r("teff_ub"),
          "assigning variable teff_ub_flat__");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
          current_statement__ = 65;
          for (int sym2__ = 1; sym2__ <= logical_gt(num_uncrt, 0); ++sym2__) {
            current_statement__ = 65;
            assign(teff_ub,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              teff_ub_flat__[(pos__ - 1)], "assigning variable teff_ub");
            current_statement__ = 65;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 66;
      validate_non_negative_index("x_cat_num_levels", "num_cov_cat",
                                  num_cov_cat);
      current_statement__ = 67;
      context__.validate_dims("data initialization","x_cat_num_levels","int",
          context__.to_vec(num_cov_cat));
      x_cat_num_levels = std::vector<int>(num_cov_cat, std::numeric_limits<int>::min());
      
      current_statement__ = 67;
      assign(x_cat_num_levels, nil_index_list(),
        context__.vals_i("x_cat_num_levels"),
        "assigning variable x_cat_num_levels");
      current_statement__ = 67;
      for (int sym1__ = 1; sym1__ <= num_cov_cat; ++sym1__) {
        current_statement__ = 67;
        current_statement__ = 67;
        check_greater_or_equal(function__, "x_cat_num_levels[sym1__]",
                               x_cat_num_levels[(sym1__ - 1)], 0);}
      current_statement__ = 68;
      context__.validate_dims("data initialization","delta","double",
          context__.to_vec());
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 68;
      delta = context__.vals_r("delta")[(1 - 1)];
      current_statement__ = 69;
      context__.validate_dims("data initialization","vm_params","double",
          context__.to_vec(2));
      vm_params = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 69;
      assign(vm_params, nil_index_list(), context__.vals_r("vm_params"),
        "assigning variable vm_params");
      current_statement__ = 70;
      validate_non_negative_index("x_cont", "num_cov_cont", num_cov_cont);
      current_statement__ = 71;
      validate_non_negative_index("x_cont", "num_obs", num_obs);
      current_statement__ = 72;
      context__.validate_dims("data initialization","x_cont","double",
          context__.to_vec(num_cov_cont, num_obs));
      x_cont = std::vector<Eigen::Matrix<double, -1, 1>>(num_cov_cont, Eigen::Matrix<double, -1, 1>(num_obs));
      stan::math::fill(x_cont, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_cont_flat__;
        current_statement__ = 72;
        assign(x_cont_flat__, nil_index_list(), context__.vals_r("x_cont"),
          "assigning variable x_cont_flat__");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= num_cov_cont; ++sym2__) {
            current_statement__ = 72;
            assign(x_cont,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_cont_flat__[(pos__ - 1)], "assigning variable x_cont");
            current_statement__ = 72;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 73;
      validate_non_negative_index("x_cont_unnorm", "num_cov_cont",
                                  num_cov_cont);
      current_statement__ = 74;
      validate_non_negative_index("x_cont_unnorm", "num_obs", num_obs);
      current_statement__ = 75;
      context__.validate_dims("data initialization","x_cont_unnorm","double",
          context__.to_vec(num_cov_cont, num_obs));
      x_cont_unnorm = std::vector<Eigen::Matrix<double, -1, 1>>(num_cov_cont, Eigen::Matrix<double, -1, 1>(num_obs));
      stan::math::fill(x_cont_unnorm, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_cont_unnorm_flat__;
        current_statement__ = 75;
        assign(x_cont_unnorm_flat__, nil_index_list(),
          context__.vals_r("x_cont_unnorm"),
          "assigning variable x_cont_unnorm_flat__");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
          current_statement__ = 75;
          for (int sym2__ = 1; sym2__ <= num_cov_cont; ++sym2__) {
            current_statement__ = 75;
            assign(x_cont_unnorm,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_cont_unnorm_flat__[(pos__ - 1)],
              "assigning variable x_cont_unnorm");
            current_statement__ = 75;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 76;
      validate_non_negative_index("x_cont_mask", "num_cov_cont", num_cov_cont);
      current_statement__ = 77;
      validate_non_negative_index("x_cont_mask", "num_obs", num_obs);
      current_statement__ = 78;
      context__.validate_dims("data initialization","x_cont_mask","int",
          context__.to_vec(num_cov_cont, num_obs));
      x_cont_mask = std::vector<std::vector<int>>(num_cov_cont, std::vector<int>(num_obs, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> x_cont_mask_flat__;
        current_statement__ = 78;
        assign(x_cont_mask_flat__, nil_index_list(),
          context__.vals_i("x_cont_mask"),
          "assigning variable x_cont_mask_flat__");
        current_statement__ = 78;
        pos__ = 1;
        current_statement__ = 78;
        for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
          current_statement__ = 78;
          for (int sym2__ = 1; sym2__ <= num_cov_cont; ++sym2__) {
            current_statement__ = 78;
            assign(x_cont_mask,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_cont_mask_flat__[(pos__ - 1)],
              "assigning variable x_cont_mask");
            current_statement__ = 78;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 79;
      validate_non_negative_index("x_cat", "num_cov_cat", num_cov_cat);
      current_statement__ = 80;
      validate_non_negative_index("x_cat", "num_obs", num_obs);
      current_statement__ = 81;
      context__.validate_dims("data initialization","x_cat","int",
          context__.to_vec(num_cov_cat, num_obs));
      x_cat = std::vector<std::vector<int>>(num_cov_cat, std::vector<int>(num_obs, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> x_cat_flat__;
        current_statement__ = 81;
        assign(x_cat_flat__, nil_index_list(), context__.vals_i("x_cat"),
          "assigning variable x_cat_flat__");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
          current_statement__ = 81;
          for (int sym2__ = 1; sym2__ <= num_cov_cat; ++sym2__) {
            current_statement__ = 81;
            assign(x_cat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_cat_flat__[(pos__ - 1)], "assigning variable x_cat");
            current_statement__ = 81;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 82;
      validate_non_negative_index("idx_expand", "num_obs", num_obs);
      current_statement__ = 83;
      context__.validate_dims("data initialization","idx_expand","int",
          context__.to_vec(num_obs));
      idx_expand = std::vector<int>(num_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 83;
      assign(idx_expand, nil_index_list(), context__.vals_i("idx_expand"),
        "assigning variable idx_expand");
      current_statement__ = 83;
      for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
        current_statement__ = 83;
        current_statement__ = 83;
        check_greater_or_equal(function__, "idx_expand[sym1__]",
                               idx_expand[(sym1__ - 1)], 1);}
      current_statement__ = 83;
      for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
        current_statement__ = 83;
        current_statement__ = 83;
        check_less_or_equal(function__, "idx_expand[sym1__]",
                            idx_expand[(sym1__ - 1)], (num_bt + 1));}
      current_statement__ = 84;
      validate_non_negative_index("prior_alpha", "num_comps", num_comps);
      current_statement__ = 85;
      context__.validate_dims("data initialization","prior_alpha","int",
          context__.to_vec(num_comps, 2));
      prior_alpha = std::vector<std::vector<int>>(num_comps, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> prior_alpha_flat__;
        current_statement__ = 85;
        assign(prior_alpha_flat__, nil_index_list(),
          context__.vals_i("prior_alpha"),
          "assigning variable prior_alpha_flat__");
        current_statement__ = 85;
        pos__ = 1;
        current_statement__ = 85;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 85;
          for (int sym2__ = 1; sym2__ <= num_comps; ++sym2__) {
            current_statement__ = 85;
            assign(prior_alpha,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_alpha_flat__[(pos__ - 1)],
              "assigning variable prior_alpha");
            current_statement__ = 85;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 85;
      for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
        current_statement__ = 85;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 85;
          current_statement__ = 85;
          check_greater_or_equal(function__, "prior_alpha[sym1__, sym2__]",
                                 prior_alpha[(sym1__ - 1)][(sym2__ - 1)], 0);
        }}
      current_statement__ = 86;
      validate_non_negative_index("prior_ell", "num_ell", num_ell);
      current_statement__ = 87;
      context__.validate_dims("data initialization","prior_ell","int",
          context__.to_vec(num_ell, 2));
      prior_ell = std::vector<std::vector<int>>(num_ell, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> prior_ell_flat__;
        current_statement__ = 87;
        assign(prior_ell_flat__, nil_index_list(),
          context__.vals_i("prior_ell"),
          "assigning variable prior_ell_flat__");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 87;
          for (int sym2__ = 1; sym2__ <= num_ell; ++sym2__) {
            current_statement__ = 87;
            assign(prior_ell,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_ell_flat__[(pos__ - 1)], "assigning variable prior_ell");
            current_statement__ = 87;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 87;
      for (int sym1__ = 1; sym1__ <= num_ell; ++sym1__) {
        current_statement__ = 87;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 87;
          current_statement__ = 87;
          check_greater_or_equal(function__, "prior_ell[sym1__, sym2__]",
                                 prior_ell[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 88;
      validate_non_negative_index("prior_wrp", "num_ns", num_ns);
      current_statement__ = 89;
      context__.validate_dims("data initialization","prior_wrp","int",
          context__.to_vec(num_ns, 2));
      prior_wrp = std::vector<std::vector<int>>(num_ns, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> prior_wrp_flat__;
        current_statement__ = 89;
        assign(prior_wrp_flat__, nil_index_list(),
          context__.vals_i("prior_wrp"),
          "assigning variable prior_wrp_flat__");
        current_statement__ = 89;
        pos__ = 1;
        current_statement__ = 89;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 89;
          for (int sym2__ = 1; sym2__ <= num_ns; ++sym2__) {
            current_statement__ = 89;
            assign(prior_wrp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_wrp_flat__[(pos__ - 1)], "assigning variable prior_wrp");
            current_statement__ = 89;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 89;
      for (int sym1__ = 1; sym1__ <= num_ns; ++sym1__) {
        current_statement__ = 89;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 89;
          current_statement__ = 89;
          check_greater_or_equal(function__, "prior_wrp[sym1__, sym2__]",
                                 prior_wrp[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 90;
      validate_non_negative_index("prior_teff", "num_uncrt > 0",
                                  logical_gt(num_uncrt, 0));
      current_statement__ = 91;
      context__.validate_dims("data initialization","prior_teff","int",
          context__.to_vec(logical_gt(num_uncrt, 0), 2));
      prior_teff = std::vector<std::vector<int>>(logical_gt(num_uncrt, 0), std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> prior_teff_flat__;
        current_statement__ = 91;
        assign(prior_teff_flat__, nil_index_list(),
          context__.vals_i("prior_teff"),
          "assigning variable prior_teff_flat__");
        current_statement__ = 91;
        pos__ = 1;
        current_statement__ = 91;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 91;
          for (int sym2__ = 1; sym2__ <= logical_gt(num_uncrt, 0); ++sym2__) {
            current_statement__ = 91;
            assign(prior_teff,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_teff_flat__[(pos__ - 1)], "assigning variable prior_teff");
            current_statement__ = 91;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 91;
      for (int sym1__ = 1; sym1__ <= logical_gt(num_uncrt, 0); ++sym1__) {
        current_statement__ = 91;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 91;
          current_statement__ = 91;
          check_greater_or_equal(function__, "prior_teff[sym1__, sym2__]",
                                 prior_teff[(sym1__ - 1)][(sym2__ - 1)], 0);}
      }
      current_statement__ = 92;
      validate_non_negative_index("hyper_alpha", "num_comps", num_comps);
      current_statement__ = 93;
      context__.validate_dims("data initialization","hyper_alpha","double",
          context__.to_vec(num_comps, 3));
      hyper_alpha = std::vector<std::vector<double>>(num_comps, std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> hyper_alpha_flat__;
        current_statement__ = 93;
        assign(hyper_alpha_flat__, nil_index_list(),
          context__.vals_r("hyper_alpha"),
          "assigning variable hyper_alpha_flat__");
        current_statement__ = 93;
        pos__ = 1;
        current_statement__ = 93;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 93;
          for (int sym2__ = 1; sym2__ <= num_comps; ++sym2__) {
            current_statement__ = 93;
            assign(hyper_alpha,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              hyper_alpha_flat__[(pos__ - 1)],
              "assigning variable hyper_alpha");
            current_statement__ = 93;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 94;
      validate_non_negative_index("hyper_ell", "num_ell", num_ell);
      current_statement__ = 95;
      context__.validate_dims("data initialization","hyper_ell","double",
          context__.to_vec(num_ell, 3));
      hyper_ell = std::vector<std::vector<double>>(num_ell, std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> hyper_ell_flat__;
        current_statement__ = 95;
        assign(hyper_ell_flat__, nil_index_list(),
          context__.vals_r("hyper_ell"),
          "assigning variable hyper_ell_flat__");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= num_ell; ++sym2__) {
            current_statement__ = 95;
            assign(hyper_ell,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              hyper_ell_flat__[(pos__ - 1)], "assigning variable hyper_ell");
            current_statement__ = 95;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 96;
      validate_non_negative_index("hyper_wrp", "num_ns", num_ns);
      current_statement__ = 97;
      context__.validate_dims("data initialization","hyper_wrp","double",
          context__.to_vec(num_ns, 3));
      hyper_wrp = std::vector<std::vector<double>>(num_ns, std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> hyper_wrp_flat__;
        current_statement__ = 97;
        assign(hyper_wrp_flat__, nil_index_list(),
          context__.vals_r("hyper_wrp"),
          "assigning variable hyper_wrp_flat__");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 97;
          for (int sym2__ = 1; sym2__ <= num_ns; ++sym2__) {
            current_statement__ = 97;
            assign(hyper_wrp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              hyper_wrp_flat__[(pos__ - 1)], "assigning variable hyper_wrp");
            current_statement__ = 97;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 98;
      validate_non_negative_index("hyper_teff", "num_uncrt > 0",
                                  logical_gt(num_uncrt, 0));
      current_statement__ = 99;
      context__.validate_dims("data initialization","hyper_teff","double",
          context__.to_vec(logical_gt(num_uncrt, 0), 3));
      hyper_teff = std::vector<std::vector<double>>(logical_gt(num_uncrt, 0), std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> hyper_teff_flat__;
        current_statement__ = 99;
        assign(hyper_teff_flat__, nil_index_list(),
          context__.vals_r("hyper_teff"),
          "assigning variable hyper_teff_flat__");
        current_statement__ = 99;
        pos__ = 1;
        current_statement__ = 99;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 99;
          for (int sym2__ = 1; sym2__ <= logical_gt(num_uncrt, 0); ++sym2__) {
            current_statement__ = 99;
            assign(hyper_teff,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              hyper_teff_flat__[(pos__ - 1)], "assigning variable hyper_teff");
            current_statement__ = 99;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 100;
      validate_non_negative_index("hyper_beta", "num_heter > 0",
                                  logical_gt(num_heter, 0));
      current_statement__ = 101;
      context__.validate_dims("data initialization","hyper_beta","double",
          context__.to_vec(logical_gt(num_heter, 0), 2));
      hyper_beta = std::vector<std::vector<double>>(logical_gt(num_heter, 0), std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> hyper_beta_flat__;
        current_statement__ = 101;
        assign(hyper_beta_flat__, nil_index_list(),
          context__.vals_r("hyper_beta"),
          "assigning variable hyper_beta_flat__");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 101;
          for (int sym2__ = 1; sym2__ <= logical_gt(num_heter, 0); ++sym2__) {
            current_statement__ = 101;
            assign(hyper_beta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              hyper_beta_flat__[(pos__ - 1)], "assigning variable hyper_beta");
            current_statement__ = 101;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 102;
      context__.validate_dims("data initialization","obs_model","int",
          context__.to_vec());
      obs_model = std::numeric_limits<int>::min();
      
      current_statement__ = 102;
      obs_model = context__.vals_i("obs_model")[(1 - 1)];
      current_statement__ = 102;
      current_statement__ = 102;
      check_greater_or_equal(function__, "obs_model", obs_model, 1);
      current_statement__ = 102;
      current_statement__ = 102;
      check_less_or_equal(function__, "obs_model", obs_model, 5);
      current_statement__ = 103;
      validate_non_negative_index("prior_sigma", "obs_model == 1",
                                  logical_eq(obs_model, 1));
      current_statement__ = 104;
      context__.validate_dims("data initialization","prior_sigma","int",
          context__.to_vec(logical_eq(obs_model, 1), 2));
      prior_sigma = std::vector<std::vector<int>>(logical_eq(obs_model, 1), std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> prior_sigma_flat__;
        current_statement__ = 104;
        assign(prior_sigma_flat__, nil_index_list(),
          context__.vals_i("prior_sigma"),
          "assigning variable prior_sigma_flat__");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 104;
          for (int sym2__ = 1; sym2__ <= logical_eq(obs_model, 1); ++sym2__) {
            current_statement__ = 104;
            assign(prior_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_sigma_flat__[(pos__ - 1)],
              "assigning variable prior_sigma");
            current_statement__ = 104;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 104;
      for (int sym1__ = 1; sym1__ <= logical_eq(obs_model, 1); ++sym1__) {
        current_statement__ = 104;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 104;
          current_statement__ = 104;
          check_greater_or_equal(function__, "prior_sigma[sym1__, sym2__]",
                                 prior_sigma[(sym1__ - 1)][(sym2__ - 1)], 0);
        }}
      current_statement__ = 105;
      validate_non_negative_index("prior_phi", "obs_model == 3",
                                  logical_eq(obs_model, 3));
      current_statement__ = 106;
      context__.validate_dims("data initialization","prior_phi","int",
          context__.to_vec(logical_eq(obs_model, 3), 2));
      prior_phi = std::vector<std::vector<int>>(logical_eq(obs_model, 3), std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> prior_phi_flat__;
        current_statement__ = 106;
        assign(prior_phi_flat__, nil_index_list(),
          context__.vals_i("prior_phi"),
          "assigning variable prior_phi_flat__");
        current_statement__ = 106;
        pos__ = 1;
        current_statement__ = 106;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 106;
          for (int sym2__ = 1; sym2__ <= logical_eq(obs_model, 3); ++sym2__) {
            current_statement__ = 106;
            assign(prior_phi,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_phi_flat__[(pos__ - 1)], "assigning variable prior_phi");
            current_statement__ = 106;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 106;
      for (int sym1__ = 1; sym1__ <= logical_eq(obs_model, 3); ++sym1__) {
        current_statement__ = 106;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 106;
          current_statement__ = 106;
          check_greater_or_equal(function__, "prior_phi[sym1__, sym2__]",
                                 prior_phi[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 107;
      validate_non_negative_index("hyper_sigma", "obs_model == 1",
                                  logical_eq(obs_model, 1));
      current_statement__ = 108;
      context__.validate_dims("data initialization","hyper_sigma","double",
          context__.to_vec(logical_eq(obs_model, 1), 3));
      hyper_sigma = std::vector<std::vector<double>>(logical_eq(obs_model, 1), std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> hyper_sigma_flat__;
        current_statement__ = 108;
        assign(hyper_sigma_flat__, nil_index_list(),
          context__.vals_r("hyper_sigma"),
          "assigning variable hyper_sigma_flat__");
        current_statement__ = 108;
        pos__ = 1;
        current_statement__ = 108;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 108;
          for (int sym2__ = 1; sym2__ <= logical_eq(obs_model, 1); ++sym2__) {
            current_statement__ = 108;
            assign(hyper_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              hyper_sigma_flat__[(pos__ - 1)],
              "assigning variable hyper_sigma");
            current_statement__ = 108;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 109;
      validate_non_negative_index("hyper_phi", "obs_model == 3",
                                  logical_eq(obs_model, 3));
      current_statement__ = 110;
      context__.validate_dims("data initialization","hyper_phi","double",
          context__.to_vec(logical_eq(obs_model, 3), 3));
      hyper_phi = std::vector<std::vector<double>>(logical_eq(obs_model, 3), std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> hyper_phi_flat__;
        current_statement__ = 110;
        assign(hyper_phi_flat__, nil_index_list(),
          context__.vals_r("hyper_phi"),
          "assigning variable hyper_phi_flat__");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1; sym2__ <= logical_eq(obs_model, 3); ++sym2__) {
            current_statement__ = 110;
            assign(hyper_phi,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              hyper_phi_flat__[(pos__ - 1)], "assigning variable hyper_phi");
            current_statement__ = 110;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 111;
      validate_non_negative_index("hyper_gamma", "obs_model == 5",
                                  logical_eq(obs_model, 5));
      current_statement__ = 112;
      context__.validate_dims("data initialization","hyper_gamma","double",
          context__.to_vec(logical_eq(obs_model, 5), 2));
      hyper_gamma = std::vector<std::vector<double>>(logical_eq(obs_model, 5), std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> hyper_gamma_flat__;
        current_statement__ = 112;
        assign(hyper_gamma_flat__, nil_index_list(),
          context__.vals_r("hyper_gamma"),
          "assigning variable hyper_gamma_flat__");
        current_statement__ = 112;
        pos__ = 1;
        current_statement__ = 112;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 112;
          for (int sym2__ = 1; sym2__ <= logical_eq(obs_model, 5); ++sym2__) {
            current_statement__ = 112;
            assign(hyper_gamma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              hyper_gamma_flat__[(pos__ - 1)],
              "assigning variable hyper_gamma");
            current_statement__ = 112;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 113;
      validate_non_negative_index("alpha", "num_comps", num_comps);
      current_statement__ = 114;
      validate_non_negative_index("ell", "num_ell", num_ell);
      current_statement__ = 115;
      validate_non_negative_index("wrp", "num_ns", num_ns);
      current_statement__ = 116;
      beta_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 116;
      beta_1dim__ = logical_gt(num_heter, 0);
      current_statement__ = 116;
      validate_non_negative_index("beta", "num_heter > 0", beta_1dim__);
      current_statement__ = 117;
      validate_non_negative_index("beta", "num_bt", num_bt);
      current_statement__ = 118;
      teff_raw_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 118;
      teff_raw_1dim__ = logical_gt(num_uncrt, 0);
      current_statement__ = 118;
      validate_non_negative_index("teff_raw", "num_uncrt > 0",
                                  teff_raw_1dim__);
      current_statement__ = 119;
      validate_non_negative_index("teff_raw", "num_bt", num_bt);
      current_statement__ = 120;
      sigma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 120;
      sigma_1dim__ = logical_eq(obs_model, 1);
      current_statement__ = 120;
      validate_non_negative_index("sigma", "obs_model == 1", sigma_1dim__);
      current_statement__ = 121;
      phi_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 121;
      phi_1dim__ = logical_eq(obs_model, 3);
      current_statement__ = 121;
      validate_non_negative_index("phi", "obs_model == 3", phi_1dim__);
      current_statement__ = 122;
      gamma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 122;
      gamma_1dim__ = logical_eq(obs_model, 5);
      current_statement__ = 122;
      validate_non_negative_index("gamma", "obs_model == 5", gamma_1dim__);
      current_statement__ = 123;
      teff_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 123;
      teff_1dim__ = logical_gt(num_uncrt, 0);
      current_statement__ = 123;
      validate_non_negative_index("teff", "num_uncrt > 0", teff_1dim__);
      current_statement__ = 124;
      validate_non_negative_index("teff", "num_bt", num_bt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += num_comps;
      num_params_r__ += num_ell;
      num_params_r__ += num_ns;
      num_params_r__ += beta_1dim__ * num_bt;
      num_params_r__ += teff_raw_1dim__ * num_bt;
      num_params_r__ += sigma_1dim__;
      num_params_r__ += phi_1dim__;
      num_params_r__ += gamma_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_parameter_prior_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> alpha;
      alpha = std::vector<local_scalar_t__>(num_comps, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
        current_statement__ = 1;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 1e-12, lp__),
            "assigning variable alpha");
        } else {
          current_statement__ = 1;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 1e-12),
            "assigning variable alpha");
        }}
      std::vector<local_scalar_t__> ell;
      ell = std::vector<local_scalar_t__>(num_ell, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= num_ell; ++sym1__) {
        current_statement__ = 2;
        assign(ell, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ell");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= num_ell; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(ell, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(ell[(sym1__ - 1)], 1e-12, lp__),
            "assigning variable ell");
        } else {
          current_statement__ = 2;
          assign(ell, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(ell[(sym1__ - 1)], 1e-12),
            "assigning variable ell");
        }}
      std::vector<local_scalar_t__> wrp;
      wrp = std::vector<local_scalar_t__>(num_ns, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= num_ns; ++sym1__) {
        current_statement__ = 3;
        assign(wrp, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable wrp");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= num_ns; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(wrp, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(wrp[(sym1__ - 1)], 1e-12, lp__),
            "assigning variable wrp");
        } else {
          current_statement__ = 3;
          assign(wrp, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(wrp[(sym1__ - 1)], 1e-12),
            "assigning variable wrp");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta;
      beta = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(beta_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(num_bt));
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(num_bt), "assigning variable beta");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= num_bt; ++sym2__) {
          current_statement__ = 4;
          if (jacobian__) {
            current_statement__ = 4;
            assign(beta,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(beta[(sym1__ - 1)][(sym2__ - 1)],
                1e-12, (1 - 1e-12), lp__), "assigning variable beta");
          } else {
            current_statement__ = 4;
            assign(beta,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(beta[(sym1__ - 1)][(sym2__ - 1)],
                1e-12, (1 - 1e-12)), "assigning variable beta");
          }}}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> teff_raw;
      teff_raw = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(teff_raw_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(num_bt));
      stan::math::fill(teff_raw, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= teff_raw_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(teff_raw, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(num_bt), "assigning variable teff_raw");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= teff_raw_1dim__; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= num_bt; ++sym2__) {
          current_statement__ = 5;
          if (jacobian__) {
            current_statement__ = 5;
            assign(teff_raw,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(teff_raw[(sym1__ - 1)][(sym2__ - 1)],
                1e-12, (1 - 1e-12), lp__), "assigning variable teff_raw");
          } else {
            current_statement__ = 5;
            assign(teff_raw,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(teff_raw[(sym1__ - 1)][(sym2__ - 1)],
                1e-12, (1 - 1e-12)), "assigning variable teff_raw");
          }}}
      std::vector<local_scalar_t__> sigma;
      sigma = std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 1e-12, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 6;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 1e-12),
            "assigning variable sigma");
        }}
      std::vector<local_scalar_t__> phi;
      phi = std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi[(sym1__ - 1)], 1e-12, lp__),
            "assigning variable phi");
        } else {
          current_statement__ = 7;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi[(sym1__ - 1)], 1e-12),
            "assigning variable phi");
        }}
      std::vector<local_scalar_t__> gamma;
      gamma = std::vector<local_scalar_t__>(gamma_1dim__, DUMMY_VAR__);
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable gamma");}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(gamma[(sym1__ - 1)], 1e-12,
              (1 - 1e-12), lp__), "assigning variable gamma");
        } else {
          current_statement__ = 8;
          assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(gamma[(sym1__ - 1)], 1e-12, (1 - 1e-12)),
            "assigning variable gamma");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> teff;
      teff = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(teff_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(num_bt));
      stan::math::fill(teff, DUMMY_VAR__);
      
      current_statement__ = 12;
      for (int j = 1; j <= num_uncrt; ++j) {
        current_statement__ = 10;
        assign(teff, cons_list(index_uni(j), nil_index_list()),
          add(teff_lb[(j - 1)],
            elt_multiply(subtract(teff_ub[(j - 1)], teff_lb[(j - 1)]),
              teff_raw[(j - 1)])), "assigning variable teff");}
      {
        current_statement__ = 15;
        for (int j = 1; j <= num_comps; ++j) {
          current_statement__ = 13;
          lp_accum__.add(
            STAN_log_prior(alpha[(j - 1)], prior_alpha[(j - 1)],
              hyper_alpha[(j - 1)], pstream__));}
        current_statement__ = 18;
        for (int j = 1; j <= num_ell; ++j) {
          current_statement__ = 16;
          lp_accum__.add(
            STAN_log_prior(ell[(j - 1)], prior_ell[(j - 1)],
              hyper_ell[(j - 1)], pstream__));}
        current_statement__ = 21;
        for (int j = 1; j <= num_ns; ++j) {
          current_statement__ = 19;
          lp_accum__.add(
            STAN_log_prior(wrp[(j - 1)], prior_wrp[(j - 1)],
              hyper_wrp[(j - 1)], pstream__));}
        current_statement__ = 24;
        for (int j = 1; j <= num_heter; ++j) {
          current_statement__ = 22;
          lp_accum__.add(
            beta_lpdf<false>(beta[(j - 1)], hyper_beta[(j - 1)][(1 - 1)],
              hyper_beta[(j - 1)][(2 - 1)]));}
        current_statement__ = 34;
        for (int j = 1; j <= num_uncrt; ++j) {
          int ptype;
          ptype = std::numeric_limits<int>::min();
          
          current_statement__ = 25;
          ptype = prior_teff[(1 - 1)][(1 - 1)];
          int is_backwards;
          is_backwards = std::numeric_limits<int>::min();
          
          current_statement__ = 26;
          is_backwards = prior_teff[(1 - 1)][(2 - 1)];
          local_scalar_t__ direction;
          direction = DUMMY_VAR__;
          
          current_statement__ = 27;
          direction = pow(-1.0, is_backwards);
          current_statement__ = 28;
          validate_non_negative_index("tx", "num_bt", num_bt);
          Eigen::Matrix<local_scalar_t__, -1, 1> tx;
          tx = Eigen::Matrix<local_scalar_t__, -1, 1>(num_bt);
          stan::math::fill(tx, DUMMY_VAR__);
          
          current_statement__ = 29;
          assign(tx, nil_index_list(),
            multiply(direction, subtract(teff[(1 - 1)], teff_zero[(1 - 1)])),
            "assigning variable tx");
          current_statement__ = 32;
          for (int k = 1; k <= num_bt; ++k) {
            current_statement__ = 30;
            lp_accum__.add(
              STAN_log_prior(tx[(k - 1)], std::vector<int>{ptype, 0},
                hyper_teff[(1 - 1)], pstream__));}}
        current_statement__ = 43;
        if (logical_eq(obs_model, 1)) {
          current_statement__ = 41;
          lp_accum__.add(
            STAN_log_prior(sigma[(1 - 1)], prior_sigma[(1 - 1)],
              hyper_sigma[(1 - 1)], pstream__));
        } else {
          current_statement__ = 40;
          if (logical_eq(obs_model, 3)) {
            current_statement__ = 38;
            lp_accum__.add(
              STAN_log_prior(phi[(1 - 1)], prior_phi[(1 - 1)],
                hyper_phi[(1 - 1)], pstream__));
          } else {
            current_statement__ = 37;
            if (logical_eq(obs_model, 5)) {
              current_statement__ = 35;
              lp_accum__.add(
                beta_lpdf<false>(gamma[(1 - 1)],
                  hyper_gamma[(1 - 1)][(2 - 1)],
                  hyper_gamma[(1 - 1)][(2 - 1)]));
            } 
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_parameter_prior_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> alpha;
      alpha = std::vector<double>(num_comps, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
        current_statement__ = 1;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
        current_statement__ = 1;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha[(sym1__ - 1)], 1e-12),
          "assigning variable alpha");}
      std::vector<double> ell;
      ell = std::vector<double>(num_ell, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= num_ell; ++sym1__) {
        current_statement__ = 2;
        assign(ell, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ell");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= num_ell; ++sym1__) {
        current_statement__ = 2;
        assign(ell, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(ell[(sym1__ - 1)], 1e-12),
          "assigning variable ell");}
      std::vector<double> wrp;
      wrp = std::vector<double>(num_ns, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= num_ns; ++sym1__) {
        current_statement__ = 3;
        assign(wrp, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable wrp");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= num_ns; ++sym1__) {
        current_statement__ = 3;
        assign(wrp, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(wrp[(sym1__ - 1)], 1e-12),
          "assigning variable wrp");}
      std::vector<Eigen::Matrix<double, -1, 1>> beta;
      beta = std::vector<Eigen::Matrix<double, -1, 1>>(beta_1dim__, Eigen::Matrix<double, -1, 1>(num_bt));
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(num_bt), "assigning variable beta");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= num_bt; ++sym2__) {
          current_statement__ = 4;
          assign(beta,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_constrain(beta[(sym1__ - 1)][(sym2__ - 1)],
              1e-12, (1 - 1e-12)), "assigning variable beta");}}
      std::vector<Eigen::Matrix<double, -1, 1>> teff_raw;
      teff_raw = std::vector<Eigen::Matrix<double, -1, 1>>(teff_raw_1dim__, Eigen::Matrix<double, -1, 1>(num_bt));
      stan::math::fill(teff_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= teff_raw_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(teff_raw, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(num_bt), "assigning variable teff_raw");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= teff_raw_1dim__; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= num_bt; ++sym2__) {
          current_statement__ = 5;
          assign(teff_raw,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_constrain(teff_raw[(sym1__ - 1)][(sym2__ - 1)],
              1e-12, (1 - 1e-12)), "assigning variable teff_raw");}}
      std::vector<double> sigma;
      sigma = std::vector<double>(sigma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 1e-12),
          "assigning variable sigma");}
      std::vector<double> phi;
      phi = std::vector<double>(phi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(phi[(sym1__ - 1)], 1e-12),
          "assigning variable phi");}
      std::vector<double> gamma;
      gamma = std::vector<double>(gamma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable gamma");}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(gamma[(sym1__ - 1)], 1e-12, (1 - 1e-12)),
          "assigning variable gamma");}
      std::vector<Eigen::Matrix<double, -1, 1>> teff;
      teff = std::vector<Eigen::Matrix<double, -1, 1>>(teff_1dim__, Eigen::Matrix<double, -1, 1>(num_bt));
      stan::math::fill(teff, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_ell; ++sym1__) {
        vars__.emplace_back(ell[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_ns; ++sym1__) {
        vars__.emplace_back(wrp[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= beta_1dim__; ++sym2__) {
          vars__.emplace_back(beta[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= teff_raw_1dim__; ++sym2__) {
          vars__.emplace_back(teff_raw[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        vars__.emplace_back(phi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
        vars__.emplace_back(gamma[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 12;
      for (int j = 1; j <= num_uncrt; ++j) {
        current_statement__ = 10;
        assign(teff, cons_list(index_uni(j), nil_index_list()),
          add(teff_lb[(j - 1)],
            elt_multiply(subtract(teff_ub[(j - 1)], teff_lb[(j - 1)]),
              teff_raw[(j - 1)])), "assigning variable teff");}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= teff_1dim__; ++sym2__) {
            vars__.emplace_back(teff[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> alpha;
      alpha = std::vector<double>(num_comps, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(alpha, nil_index_list(), context__.vals_r("alpha"),
        "assigning variable alpha");
      std::vector<double> alpha_free__;
      alpha_free__ = std::vector<double>(num_comps, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
        current_statement__ = 1;
        assign(alpha_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha[(sym1__ - 1)], 1e-12),
          "assigning variable alpha_free__");}
      std::vector<double> ell;
      ell = std::vector<double>(num_ell, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(ell, nil_index_list(), context__.vals_r("ell"),
        "assigning variable ell");
      std::vector<double> ell_free__;
      ell_free__ = std::vector<double>(num_ell, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= num_ell; ++sym1__) {
        current_statement__ = 2;
        assign(ell_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(ell[(sym1__ - 1)], 1e-12),
          "assigning variable ell_free__");}
      std::vector<double> wrp;
      wrp = std::vector<double>(num_ns, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(wrp, nil_index_list(), context__.vals_r("wrp"),
        "assigning variable wrp");
      std::vector<double> wrp_free__;
      wrp_free__ = std::vector<double>(num_ns, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= num_ns; ++sym1__) {
        current_statement__ = 3;
        assign(wrp_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(wrp[(sym1__ - 1)], 1e-12),
          "assigning variable wrp_free__");}
      std::vector<Eigen::Matrix<double, -1, 1>> beta;
      beta = std::vector<Eigen::Matrix<double, -1, 1>>(beta_1dim__, Eigen::Matrix<double, -1, 1>(num_bt));
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 4;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= beta_1dim__; ++sym2__) {
            current_statement__ = 4;
            assign(beta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              beta_flat__[(pos__ - 1)], "assigning variable beta");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> beta_free__;
      beta_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(beta_1dim__, Eigen::Matrix<double, -1, 1>(num_bt));
      stan::math::fill(beta_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= num_bt; ++sym2__) {
          current_statement__ = 4;
          assign(beta_free__,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_free(beta[(sym1__ - 1)][(sym2__ - 1)], 1e-12,
              (1 - 1e-12)), "assigning variable beta_free__");}}
      std::vector<Eigen::Matrix<double, -1, 1>> teff_raw;
      teff_raw = std::vector<Eigen::Matrix<double, -1, 1>>(teff_raw_1dim__, Eigen::Matrix<double, -1, 1>(num_bt));
      stan::math::fill(teff_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> teff_raw_flat__;
        current_statement__ = 5;
        assign(teff_raw_flat__, nil_index_list(),
          context__.vals_r("teff_raw"), "assigning variable teff_raw_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= teff_raw_1dim__; ++sym2__) {
            current_statement__ = 5;
            assign(teff_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              teff_raw_flat__[(pos__ - 1)], "assigning variable teff_raw");
            current_statement__ = 5;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> teff_raw_free__;
      teff_raw_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(teff_raw_1dim__, Eigen::Matrix<double, -1, 1>(num_bt));
      stan::math::fill(teff_raw_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= teff_raw_1dim__; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= num_bt; ++sym2__) {
          current_statement__ = 5;
          assign(teff_raw_free__,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_free(teff_raw[(sym1__ - 1)][(sym2__ - 1)], 1e-12,
              (1 - 1e-12)), "assigning variable teff_raw_free__");}}
      std::vector<double> sigma;
      sigma = std::vector<double>(sigma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(sigma, nil_index_list(), context__.vals_r("sigma"),
        "assigning variable sigma");
      std::vector<double> sigma_free__;
      sigma_free__ = std::vector<double>(sigma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(sigma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 1e-12),
          "assigning variable sigma_free__");}
      std::vector<double> phi;
      phi = std::vector<double>(phi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(phi, nil_index_list(), context__.vals_r("phi"),
        "assigning variable phi");
      std::vector<double> phi_free__;
      phi_free__ = std::vector<double>(phi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(phi_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(phi[(sym1__ - 1)], 1e-12),
          "assigning variable phi_free__");}
      std::vector<double> gamma;
      gamma = std::vector<double>(gamma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      assign(gamma, nil_index_list(), context__.vals_r("gamma"),
        "assigning variable gamma");
      std::vector<double> gamma_free__;
      gamma_free__ = std::vector<double>(gamma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
        current_statement__ = 8;
        assign(gamma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(gamma[(sym1__ - 1)], 1e-12, (1 - 1e-12)),
          "assigning variable gamma_free__");}
      for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
        vars__.emplace_back(alpha_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_ell; ++sym1__) {
        vars__.emplace_back(ell_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_ns; ++sym1__) {
        vars__.emplace_back(wrp_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_bt; ++sym2__) {
          vars__.emplace_back(beta_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= teff_raw_1dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_bt; ++sym2__) {
          vars__.emplace_back(teff_raw_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        vars__.emplace_back(phi_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
        vars__.emplace_back(gamma_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("alpha");
    names__.emplace_back("ell");
    names__.emplace_back("wrp");
    names__.emplace_back("beta");
    names__.emplace_back("teff_raw");
    names__.emplace_back("sigma");
    names__.emplace_back("phi");
    names__.emplace_back("gamma");
    names__.emplace_back("teff");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_comps)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_ell)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_ns)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(beta_1dim__)
                                             , static_cast<size_t>(num_bt)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(teff_raw_1dim__)
                                             , static_cast<size_t>(num_bt)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(phi_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(gamma_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(teff_1dim__)
                                             , static_cast<size_t>(num_bt)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= num_ell; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ell" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= num_ns; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "wrp" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= beta_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= teff_raw_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "teff_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= teff_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "teff" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= num_comps; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= num_ell; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ell" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= num_ns; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "wrp" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= beta_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= teff_raw_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "teff_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= num_bt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= teff_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "teff" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << num_comps << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ell\",\"type\":{\"name\":\"array\",\"length\":" << num_ell << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"wrp\",\"type\":{\"name\":\"array\",\"length\":" << num_ns << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << beta_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_bt << "}},\"block\":\"parameters\"},{\"name\":\"teff_raw\",\"type\":{\"name\":\"array\",\"length\":" << teff_raw_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_bt << "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << sigma_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" << phi_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" << gamma_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"teff\",\"type\":{\"name\":\"array\",\"length\":" << teff_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_bt << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << num_comps << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ell\",\"type\":{\"name\":\"array\",\"length\":" << num_ell << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"wrp\",\"type\":{\"name\":\"array\",\"length\":" << num_ns << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << beta_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_bt << "}},\"block\":\"parameters\"},{\"name\":\"teff_raw\",\"type\":{\"name\":\"array\",\"length\":" << teff_raw_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_bt << "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << sigma_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" << phi_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" << gamma_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"teff\",\"type\":{\"name\":\"array\",\"length\":" << teff_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_bt << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_parameter_prior_namespace::model_parameter_prior;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_parameter_prior_namespace::profiles__;
}
#endif
#endif
